@using BlazorDataAnalytics.Services.ReportBugService
@using Models
@using BlazorDataAnalytics.Enums
@using BlazorDataAnalytics.Services
@inject IReportBugService _reportBugService

@page "/reportbugs"


<PageTitle>Report a Bug</PageTitle>

 <div class="row col-lg-8 filter-bar" >            
    <div class="col-lg-12">
        <h3 style="text-shadow: 1px 1px 5px white;text-align:center;">Report Bugs</h3>
    </div>
</div>
<div class="col-lg-12 control-section">
  <div class="row">
    <div class="col-4">
         <SfTextBox Placeholder='Title, Description' FloatLabelType='@FloatLabelType.Auto' Width="80" @bind-Value="@text"></SfTextBox>
    </div>
    <div class="col-md-auto">
        <div style="margin-top:11.5%;">
         <SfDropDownList TValue="byte" TItem="ReportBugStatusModel" Placeholder="Select a status" DataSource="@reportStatusData" @bind-Value="@reportBugStatus" >
            <DropDownListFieldSettings Value="Id" Text="StatusName"></DropDownListFieldSettings>
         </SfDropDownList>
        </div>
    </div>
  </div>
   <div class="row" style="margin-top:1%">
    <div class="col-2">
        <SfDatePicker TValue="DateTime?" @bind-Value='@dateFrom' Format='yyyy-MM-dd' Placeholder="Date From: "></SfDatePicker>
    </div>
    <div class="col-2">
        <SfDatePicker TValue="DateTime?" @bind-Value='@dateTo' Format='yyyy-MM-dd' Placeholder="Date To: "></SfDatePicker>
    </div>
    <div class="col-md-auto">
        <SfButton CssClass="e-medium" OnClick="@(async (e) => await SearchReportBugs())">Search</SfButton>
    </div>
    <div class="col-5">
    </div>
    <div class="col-2">
        <SfButton CssClass="e-medium" OnClick="@(async (e) => await AddReportBug())">Add</SfButton>
    </div>
  </div>
</div>

<div class="col-lg-12 control-section" style="margin-top:1%;">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@listReportBugs" Height="500" Width="auto">
                <GridColumns>
                    <GridColumn Field=@nameof(ReportBugModel.Id) TextAlign="TextAlign.Center" HeaderText="ID" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(ReportBugModel.Title) HeaderText="Title" ShowInColumnChooser="false" Width="110"></GridColumn>
       @*             <GridColumn  HeaderText="Description" Width="300">
                        <Template>
                                  @{ 
                                  var reportBugModel = (context as ReportBugModel); 
                                <SfRichTextEditor Readonly="true" @ref="ideaModelObj" EnableHtmlEncode="true" Value="@reportBugModel.Description" >
                                    <ChildContent>
                                        <RichTextEditorToolbarSettings Enable="false"></RichTextEditorToolbarSettings>
                                        <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64"></RichTextEditorImageSettings>
                                    </ChildContent>
                                </SfRichTextEditor>
                            } 
                        </Template>
                    </GridColumn>*@
                    <GridColumn Field=@nameof(ReportBugModel.ReportedBy) HeaderText="Reported By" Width="80"></GridColumn>
                    <GridColumn Field=@nameof(ReportBugModel.DateReported) HeaderText="Reported Date" Format="dd/MM/yyyy hh:mm:ss tt" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(ReportBugModel.ReportBugStatusName) HeaderText="Status" Width="60"></GridColumn>
                    <GridColumn  TextAlign="TextAlign.Center" Width="50"> 
                        <Template> 
                            @{ 
                                var reportBug = (context as ReportBugModel); 
                                <div class="image"> 
                                    <SfButton IconCss="e-icons e-edit e-btn-icon" CssClass="e-btn-grd" @onclick="async (e) => await EditReportBug(reportBug)"></SfButton> 
                                    <SfButton IconCss="e-icons e-delete-row e-btn-icon" CssClass="e-btn-grd" @onclick="async (e) => await ViewDeleteReportBug(reportBug)"></SfButton>                                  
                                </div> 
                            } 
                        </Template> 
                    </GridColumn> 
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
<ReportBugDialog @ref="ReportBugDialog" RefreshPageEventCallBack="RefreshBugs" />
<DeleteReportBugDialog @ref="DeleteReportBugDialog" RefreshPageEventCallBack="RefreshBugs" />
@code {
    ReportBugDialog ReportBugDialog;
    DeleteReportBugDialog DeleteReportBugDialog;
    SfRichTextEditor ideaModelObj;
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<ReportBugModel> listReportBugs { get; set; } = new List<ReportBugModel>();

    private List<ReportBugStatusModel> reportStatusData =  Enum.GetValues(typeof(EnumReportBugStatus))
                            .Cast<EnumReportBugStatus>()
                            .Select(v => new ReportBugStatusModel { Id = (byte)v, StatusName = v.GetDescription() })
                            .ToList();

    private string text { get; set; }

    private DateTime? dateFrom { get; set; } = DateTime.Now.AddDays(-30);

    private DateTime? dateTo { get; set; } = DateTime.Now;

    private ReportBugSearchModel searchModel = new ReportBugSearchModel();

    private byte reportBugStatus { get; set; } = (byte)EnumReportBugStatus.Open;

    private bool viewDeleteModal { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        await SearchReportBugs();
    }
    private void RefreshBugs(bool refreshParentPage)
    {
        if(refreshParentPage)
        {
            this.SearchReportBugs().ConfigureAwait(true);;
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SearchReportBugs();
            StateHasChanged();
        }
    }


    private async Task SearchReportBugs()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        searchModel = new ReportBugSearchModel
        {
            Text = text,
            DateFrom = dateFrom,
            DateTo = new DateTime(dateTo.Value.Year, dateTo.Value.Month, dateTo.Value.Day, 23, 59, 59, 999),
            ReportedBy = user.Identity.Name,
            ReportBugStatus = (EnumReportBugStatus)reportBugStatus
        };

        listReportBugs = await _reportBugService.GestReportBugListAsync(searchModel);
        StateHasChanged();
    }

    private async Task AddReportBug()
    {

        await ReportBugDialog.OpenDialog(0, string.Empty, string.Empty, string.Empty, 0);
    }

    private async Task EditReportBug(ReportBugModel reportBugModel)
    {
        await ReportBugDialog.OpenDialog(reportBugModel.Id, reportBugModel.ImageBlobURL,reportBugModel.Title, reportBugModel.Description,(byte)reportBugModel.ReportBugStatus);

    }

    private async Task ViewDeleteReportBug(ReportBugModel reportBugModel)
    {
        DeleteReportBugDialog.OpenDialog(reportBugModel.Id);

    }

}
<style> 
    .margin-dropdown textarea{ 
        height: 11% !important; 
    } 

    .e-btn-grd{
        background-color: transparent !important;
    }
    .e-content
    {
        height:150px;
    }
    .e-rte-content {
    border: none !important;
    height: 100px !important;
    overflow: auto;
    }
    .e-richtexteditor {
    color: #333;
    display: block;
    position: relative;
    border: none !important;
    }
  @@media (min-width:320px)  {     
    .filter-bar {
        top: .7em;
        text-align: center;
        padding: 5px;
        box-shadow: 0px 0px 0px 0px #a5aba594;
        border-radius: 1px;
        -webkit-tap-highlight-color: transparent;
        border-color: transparent;
        color: rgba(0,0,0,0.87);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    } }
@@media (min-width:481px)  {    
    .filter-bar {
        top: .7em;
        text-align: center;
        padding: 5px;
        box-shadow: 0px 0px 0px 0px #a5aba594;
        border-radius: 1px;
        -webkit-tap-highlight-color: transparent;
        border-color: transparent;
        color: rgba(0,0,0,0.87);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    } }
@@media (min-width:641px)  {   
     .filter-bar {
        top: .7em;
        text-align: center;
        padding: 5px;
        box-shadow: 0px 0px 0px 0px #a5aba594;
        border-radius: 1px;
        -webkit-tap-highlight-color: transparent;
        border-color: transparent;
        color: rgba(0,0,0,0.87);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    }}
@@media (min-width:961px)  {   
    .filter-bar {
    cursor: pointer;
    right: 13vw;
    /* left: 5vw; */
    top: .7em;
    position: absolute;
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 0px 0px #a5aba594;
    border-radius: 1px;
    -webkit-tap-highlight-color: transparent;
    border-color: transparent;
    color: rgba(0,0,0,0.87);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
} }
@@media (min-width:1025px) {    
    .filter-bar {
    cursor: pointer;
    right: 13vw;
    /* left: 5vw; */
    top: .7em;
    position: absolute;
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 0px 0px #a5aba594;
    border-radius: 1px;
    -webkit-tap-highlight-color: transparent;
    border-color: transparent;
    color: rgba(0,0,0,0.87);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
} }
@@media (min-width:1281px) {   
    .filter-bar {
    cursor: pointer;
    right: 13vw;
    /* left: 5vw; */
    top: .7em;
    position: absolute;
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 0px 0px #a5aba594;
    border-radius: 1px;
    -webkit-tap-highlight-color: transparent;
    border-color: transparent;
    color: rgba(0,0,0,0.87);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
} }
</style> 