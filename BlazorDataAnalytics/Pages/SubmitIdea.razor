@using BlazorDataAnalytics.Services.IdeaService
@using Models
@using BlazorDataAnalytics.Enums
@using BlazorDataAnalytics.Services
@inject IIdeaService _ideaService

@page "/submitidea"


<PageTitle>Submit Idea</PageTitle>
 <div class="row col-lg-8 filter-bar" >            
    <div class="col-lg-12">
        <h3 style="text-shadow: 1px 1px 5px white;text-align:center;">Submit Idea</h3>
    </div>
</div>

<div class="col-lg-12 control-section">
  <div class="row">
    <div class="col-4">
         <SfTextBox Placeholder='Title, Description' FloatLabelType='@FloatLabelType.Auto' Width="80" @bind-Value="@text"></SfTextBox>
    </div>
  </div>
   <div class="row" style="margin-top:1%">
    <div class="col-2">
        <SfDatePicker TValue="DateTime?" @bind-Value='@dateFrom' Format='yyyy-MM-dd' Placeholder="Date From: "></SfDatePicker>
    </div>
    <div class="col-2">
        <SfDatePicker TValue="DateTime?" @bind-Value='@dateTo' Format='yyyy-MM-dd' Placeholder="Date To: "></SfDatePicker>
    </div>
    <div class="col-md-auto">
        <SfButton CssClass="e-medium" OnClick="@(async (e) => await SearchSubmitIdeas())">Search</SfButton>
    </div>
     <div class="col-5">
      @*  <SfButton CssClass="e-medium" OnClick="@(async (e) => await AddIdea())">Add</SfButton>*@
    </div>
    <div class="col-2">
        <SfButton CssClass="e-medium" OnClick="@(async (e) => await AddIdea())">Add</SfButton>
    </div>
  </div>
</div>

<div class="col-lg-12 control-section" style="margin-top:1%;">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@listIdeas" Height="500" Width="100%">
                <GridColumns>
                    <GridColumn Field=@nameof(IdeaModel.Id) TextAlign="TextAlign.Center" HeaderText="Id" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(IdeaModel.Title) HeaderText="Title" ShowInColumnChooser="false" Width="80"></GridColumn>
       @*             <GridColumn  HeaderText="Description" Width="300">
                        <Template>
                                  @{ 
                                  var ideaModel = (context as IdeaModel); 
                                <SfRichTextEditor Readonly="true" @ref="ideaModelObj" EnableHtmlEncode="true" Value="@ideaModel.Description" style="height:150px;">
                                    <ChildContent>
                                        <RichTextEditorToolbarSettings Enable="false"></RichTextEditorToolbarSettings>
                                        <RichTextEditorImageSettings SaveFormat="SaveFormat.Base64"></RichTextEditorImageSettings>
                                    </ChildContent>
                                </SfRichTextEditor>
                            } 
                        </Template>
                    </GridColumn>*@
                    <GridColumn Field=@nameof(IdeaModel.SubmittedBy) HeaderText="Submitted By" Width="80"></GridColumn>
                    <GridColumn Field=@nameof(IdeaModel.DateCreated) HeaderText="Date Submitted" Format="dd/MM/yyyy hh:mm:ss tt" TextAlign="TextAlign.Center" Width="75"></GridColumn>
                    <GridColumn Field=@nameof(IdeaModel.TotalVotes) HeaderText="No. Of Votes" Width="70" TextAlign="TextAlign.Center" ></GridColumn>
                    <GridColumn  TextAlign="TextAlign.Center" Width="60"> 
                        <Template> 
                            @{ 
                                var ideaModel = (context as IdeaModel); 
                                <div class="image"> 
                                    @if(!ideaModel.IsUserVoted)
                                    {
                                        <SfButton IconCss="oi oi-thumb-up" @onclick="async (e) => await VoteIdea(ideaModel, true)"></SfButton>
                                    }else
                                    {
                                        <SfButton IconCss="oi oi-thumb-down" @onclick="async (e) => await VoteIdea(ideaModel, false)"></SfButton>                                       
                                    }
                                    @if(ideaModel.SubmittedBy == userName)
                                    {
                                        <SfButton IconCss="e-icons e-edit e-btn-icon" CssClass="e-btn-grd" @onclick="async (e) => await EditIdea(ideaModel)"></SfButton> 
                                        <SfButton IconCss="e-icons e-delete-row e-btn-icon" CssClass="e-btn-grd" Disabled="userName != ideaModel?.SubmittedBy" @onclick="async (e) => await ViewDeleteIdea(ideaModel)"></SfButton>
                                    }else
                                    {
                                        <SfButton IconCss="e-icons e-box e-btn-icon" CssClass="e-btn-grd" @onclick="async (e) => await EditIdea(ideaModel)"></SfButton> 
                                    }
                                </div> 
                            } 
                        </Template> 
                    </GridColumn> 
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
<SubmitIdeaDialog @ref="SubmitIdeaDialog" RefreshPageEventCallBack="RefreshIdeas"/>
<DeleteIdeaDialog @ref="DeleteIdeaDialog" RefreshPageEventCallBack="RefreshIdeas"/>
@code {
    SfRichTextEditor ideaModelObj;
    SubmitIdeaDialog SubmitIdeaDialog;
    DeleteIdeaDialog DeleteIdeaDialog;
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<IdeaModel> listIdeas { get; set; } = new List<IdeaModel>();

    private string text { get; set; }

    private DateTime? dateFrom { get; set; } = DateTime.Now.AddDays(-30);

    private DateTime? dateTo { get; set; } = DateTime.Now;

    private IdeaSearchModel searchModel = new IdeaSearchModel();

    private string userName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user?.Identity?.Name ?? string.Empty;

        await SearchSubmitIdeas();
    }
    private void RefreshIdeas(bool refreshParentPage)
    {
        if (refreshParentPage)
        {
            this.SearchSubmitIdeas().ConfigureAwait(true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            userName = user?.Identity?.Name ?? string.Empty;

            await SearchSubmitIdeas();
        }
    }

    private async Task SearchSubmitIdeas()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        searchModel = new IdeaSearchModel
        {
            Text = text,
            DateFrom = dateFrom,
            DateTo = new DateTime(dateTo.Value.Year, dateTo.Value.Month, dateTo.Value.Day, 23, 59, 59, 999),
            UserName = user?.Identity?.Name ?? string.Empty
        };

        listIdeas = await _ideaService.SearchSubmitIdeaListAsync(searchModel);
        StateHasChanged();
    }

    private async Task AddIdea()
    {
        SubmitIdeaDialog.OpenDialog(0,string.Empty,string.Empty, string.Empty, string.Empty, 0);
    }



    private async Task EditIdea(IdeaModel ideaModel)
    {
        SubmitIdeaDialog.OpenDialog(ideaModel.Id, ideaModel.Title,ideaModel.Description, ideaModel.ImageBlobURL, ideaModel.SubmittedBy, 0);
    }

    private async Task ViewDeleteIdea(IdeaModel ideaModel)
    {
        DeleteIdeaDialog.OpenDialog(ideaModel.Id);

    }


    private async Task VoteIdea(IdeaModel ideaModel, bool IsUserVoted)
    {
        var ideaVoted = listIdeas.FirstOrDefault(x => x.Id == ideaModel.Id);
        var ideaVoteModel = new IdeaVoteModel
        {
           IdeadId = ideaModel.Id,
           VotedBy = userName,
           DateVoted = DateTime.Now,
           IsActive = IsUserVoted
        };
        if(ideaVoted != null)
        {
            if(IsUserVoted)
            {
                if(!ideaVoted.IsUserVoted)
                {

                    await _ideaService.VoteIdeaAsync(ideaVoteModel);
                    ideaVoted.IsUserVoted = true;
                    ideaVoted.TotalVotes += 1;
                }
            }
            else
            {   if(ideaVoted.TotalVotes > 0)
                {
                   await _ideaService.VoteIdeaAsync(ideaVoteModel);
                   ideaVoted.IsUserVoted = false;
                   ideaVoted.TotalVotes -= 1; 
                }
            }   
             listIdeas = listIdeas.ToList();
        }
        StateHasChanged();
    }


}
<style> 
    .margin-dropdown textarea{ 
        height: 11% !important; 
    } 

    .e-btn-grd{
        background-color: transparent !important;
    }
    .e-content
    {
        height:150px;
    }
    .e-rte-content {
    border: none !important;
    height: 100px !important;
    overflow: auto;
    }
    .e-richtexteditor {
    color: #333;
    display: block;
    position: relative;
    border: none !important;
    }
    @@media (min-width:320px)  {     
    .filter-bar {
        top: .7em;
        text-align: center;
        padding: 5px;
        box-shadow: 0px 0px 0px 0px #a5aba594;
        border-radius: 1px;
        -webkit-tap-highlight-color: transparent;
        border-color: transparent;
        color: rgba(0,0,0,0.87);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    } }
@@media (min-width:481px)  {    
    .filter-bar {
        top: .7em;
        text-align: center;
        padding: 5px;
        box-shadow: 0px 0px 0px 0px #a5aba594;
        border-radius: 1px;
        -webkit-tap-highlight-color: transparent;
        border-color: transparent;
        color: rgba(0,0,0,0.87);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    } }
@@media (min-width:641px)  {   
     .filter-bar {
        top: .7em;
        text-align: center;
        padding: 5px;
        box-shadow: 0px 0px 0px 0px #a5aba594;
        border-radius: 1px;
        -webkit-tap-highlight-color: transparent;
        border-color: transparent;
        color: rgba(0,0,0,0.87);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    }}
@@media (min-width:961px)  {   
    .filter-bar {
    cursor: pointer;
    right: 13vw;
    /* left: 5vw; */
    top: .7em;
    position: absolute;
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 0px 0px #a5aba594;
    border-radius: 1px;
    -webkit-tap-highlight-color: transparent;
    border-color: transparent;
    color: rgba(0,0,0,0.87);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
} }
@@media (min-width:1025px) {    
    .filter-bar {
    cursor: pointer;
    right: 13vw;
    /* left: 5vw; */
    top: .7em;
    position: absolute;
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 0px 0px #a5aba594;
    border-radius: 1px;
    -webkit-tap-highlight-color: transparent;
    border-color: transparent;
    color: rgba(0,0,0,0.87);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
} }
@@media (min-width:1281px) {   
    .filter-bar {
    cursor: pointer;
    right: 13vw;
    /* left: 5vw; */
    top: .7em;
    position: absolute;
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 0px 0px #a5aba594;
    border-radius: 1px;
    -webkit-tap-highlight-color: transparent;
    border-color: transparent;
    color: rgba(0,0,0,0.87);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
} }
</style> 