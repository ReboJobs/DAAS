@page "/"
@namespace BlazorDataAnalytics.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities; 
@using BlazorDataAnalytics.Services.UserThemeSettingService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorDataAnalytics.Models
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IUserThemeSettingService _userThemeSettingService

@{

    string themeName;

    string userName = HttpContext.User.Identity.Name ?? string.Empty;
    
    var userTheme = _userThemeSettingService.GetUserThemeSettings(userName);

    Layout = "_Layout";
    //QueryHelpers.ParseQuery(Request.QueryString.Value).TryGetValue("theme", out var themeName); 
    themeName = userTheme !=null ? userTheme.SwitchTheme : "bootstrap4"; 
}

<component type="typeof(App)" render-mode="ServerPrerendered" />
<script src="js/powerbi.min.js"></script>
<script src="_framework/blazor.server.js"></script>
<head>
    <link  href=@("css/" + themeName + ".css") rel="stylesheet" /> 
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <link href=@("/css/blazored-toast.css") rel="stylesheet" />
    <environment names="Staging,Production">
    <script src="~/js/blazored.modal.js">
    </script>
    <script src="https://cdn.syncfusion.com/blazor/19.4.38/syncfusion-blazor.min.js"
            asp-fallback-src="~/js/syncfusion-blazor.min.js">
    </script>
    <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" asp-fallback-src="~/js/bootstrap.bundle.min.js" >
    </script>
     @*<script src="~/js/signalr/dist/browser/signalr.js"></script>
     <script src="~/js/signalr/dist/browser/signalr.min.js"></script>*@
        <link href="~/css/BlazorDataAnalytics.styles.css"  rel="stylesheet" />
         <link href="~/css/blazored-modal.css"  rel="stylesheet" />
         <link href="~/css/blazored-toast.css"  rel="stylesheet"/>
          <link href="~/css/bootstrap4.css"  rel="stylesheet"/>
           <link href="~/css/material.css"  rel="stylesheet"/>
    </environment>

</head>
@{
    Response.Headers["Cache-Control"] = "no-store";
}
 <script src="~/js/script.js"></script>
<script>

        window.ShowMyPowerBI = {
            showReport: function (reportContainer, accessToken, embedUrl, embedReportId,_paramEditable,fullscreen) {
                // Get models. models contains enums that can be used.

                if (fullscreen === "true")
                {

                    if (_paramEditable === "true")
                    {

                        var models = window['powerbi-client'].models;   
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            viewMode: models.ViewMode.Edit,
                            settings: {
                                filterPaneEnabled: false,
                                navContentPaneEnabled: true
                            }
                        };
                        // Embed the report and display it within the div container.
                        report = powerbi.embed(reportContainer, config);

                        report.fullscreen();
                    
                    } else if (_paramEditable === "false")
                    {
                            var models = window['powerbi-client'].models;   
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            //viewMode: models.ViewMode.Edit,
                            settings: {
                                filterPaneEnabled: false,
                                navContentPaneEnabled: true
                            }
                        };
                        // Embed the report and display it within the div container.
                        report = powerbi.embed(reportContainer, config);

                        report.fullscreen();
                    }
                }
                else if (fullscreen === "false")
                {

                    if (_paramEditable === "true")
                    {
                        var models = window['powerbi-client'].models;
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            viewMode: models.ViewMode.Edit,
                            settings: {
                                filterPaneEnabled: false,
                                navContentPaneEnabled: true
                            }
                        };
                        // Embed the report and display it within the div container.
                            report = powerbi.embed(reportContainer, config);

                        //report.fullscreen();

                    } else if (_paramEditable === "false")
                    {
                            var models = window['powerbi-client'].models;
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            //viewMode: models.ViewMode.Edit,
                            settings: {
                                filterPaneEnabled: false,
                                navContentPaneEnabled: true
                            }
                        };
                        // Embed the report and display it within the div container.
                            report = powerbi.embed(reportContainer, config);

                        //report.fullscreen();
                    }
                    
                    var height = screen.availHeight - 170;                    
                    document.getElementById("powerbi").style.height = height + "px";
                }
                
            },

            showDashboard: function (reportContainer, accessToken, embedUrl, embedDashboardId,fullscreen) {
                // Get models. models contains enums that can be used.

                if (fullscreen === "true")
                {
                    var models = window['powerbi-client'].models;
                    var config = {
                        type: 'dashboard',
                        tokenType: models.TokenType.Embed,
                        accessToken: accessToken,
                        embedUrl: embedUrl,
                        id: embedDashboardId,
                        //viewMode: models.ViewMode.Edit,
                        settings: {
                            filterPaneEnabled: false,
                            navContentPaneEnabled: true
                        }
                    };
                    
                    // Embed the report and display it within the div container.
                    report = powerbi.embed(reportContainer, config);

                    report.fullscreen();
                }
                else if (fullscreen === "false")
                {
                    var models = window['powerbi-client'].models;
                    var config = {
                        type: 'dashboard',
                        tokenType: models.TokenType.Embed,
                        accessToken: accessToken,
                        embedUrl: embedUrl,
                        id: embedDashboardId,
                        //viewMode: models.ViewMode.Edit,
                        settings: {
                            filterPaneEnabled: false,
                            navContentPaneEnabled: true
                        }
                    };
                    
                    // Embed the report and display it within the div container.
                    report = powerbi.embed(reportContainer, config);
                
                }
       
            },
            captureViews: function (reportContainer, accessToken, embedUrl, embedReportId,_paramEditable,fullscreen) {
                    var models = window['powerbi-client'].models;   
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            viewMode: models.ViewMode.Edit,
                            settings: {
                                filterPaneEnabled: false,
                                navContentPaneEnabled: true
                            }
                        };
                        // Embed the report and display it within the div container.
                     //   report = powerbi.embed(reportContainer, config);
                        return report.bookmarksManager.capture({ personalizeVisuals: true });
            },
            getBookmarks:function (reportContainer, accessToken, embedUrl, embedReportId,_paramEditable,fullscreen) {
                // Get models. models contains enums that can be used.
                return report.bookmarksManager.getBookmarks();
            
            },
            applyState: function(state) 
            {
                return report.bookmarksManager.applyState(state);
            },
            applyTheme: function(newTheme) 
            {
                let themeJsonObject = JSON.parse(newTheme);
                console.log(newTheme);
                console.log(themeJsonObject);
                try {
                    report.applyTheme({ themeJson: themeJsonObject });
                } catch (exc) { }
            },
        };
        window.Alert = function(message) {
           alert(message);
}
        window.focusInput = function(element) { 
                var doc = document.documentElement;
            var x = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
            var y = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);
            document.getElementById(element).focus();
            window.scrollTo(x, y);
        }
         window.ChangeScreenResolution = function (id, classname) {
    var tt = '#' + id;
    $(tt).removeClass(classname);
}
window.addEventListener('error', function(e) {
    //It Will handle JS errors 
     console.log(e); 
});
 window.onerror = 
              function (msg, source, lineNo, columnNo, error) {
                console.log("Error: " + msg + 
                      "\nScript: " + source + 
                      "\nLine: " + lineNo + 
                      "\nColumn: " + columnNo + 
                      "\nStackTrace: " + error);
                return true;
            };
</script>

<script type="text/javascript">

</script>
