// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorDataAnalytics.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.RichTextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics.Dialogs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using BlazorDataAnalytics.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using BlazorDataAnalytics.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Blazorade.Msal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Microsoft.AspNetCore.Http.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Microsoft.Identity.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Microsoft.PowerBI.Api;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Microsoft.PowerBI.Api.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Microsoft.Rest;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using System.Dynamic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using BlazorDataAnalytics.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using BlazorDataAnalytics.Services.LogService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using BlazorDataAnalytics.Services.UserVaultService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
using BlazorDataAnalytics.Services.UserSecurityService;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/logs")]
    public partial class Logs : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 79 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\Logs.razor"
      
    BlazorDataAnalytics.Dialogs.MessageBoxDialog MessageDialog;
    private SfGrid<AnalyticsRow> refGrid;
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private string userEmail{ get; set; }
    private bool isAllowEdit { get; set; } = false;
    public class AnalyticsRow
    {
        public string ID { get; set; }
        public string TimeGenerated { get; set; }
        public string Category { get; set; }
        public string ResourceGroup { get; set; }
        public string ResourceProvider { get; set; }
        public string Resource { get; set; }
        public string ResourceType { get; set; }
        public string OperationName { get; set; }
        public string ResultType { get; set; }
        public string ResultDescription { get; set; }
        public string Tenant_G { get; set; }
        public string RunbookName_s { get; set; }
        public string StreamType_s { get; set; }
        public string Caller_s { get; set; }
        public string requestUri_s { get; set; }
        public string Level { get; set; }
        public string DurationMs { get; set; }
        public string CallerIpAddress { get; set; }
        public string status_s { get; set; }
        public string LogicalServerName { get; set; }
        public string Message { get; set; }
        public string Comments { get; set; }
        public string ruleName_s { get; set; }
        public string EventName_s { get; set; }
        public string startTime_t { get; set; }
        public string endTime_t { get; set; }
        public string DatabaseName_s { get; set; }
        public string SourceSystem { get; set; }
        public string Type { get; set; }
        public string identity_claim_http_schemas_xmlsoap_org_ws_2005_05_identity_claims_upn_s { get; set; }
        public string User { get; set; }
        public bool isEditable { get; set; } = false;
        public string CorrelationId{ get; set; }
    }

    public List<AnalyticsRow> analyticsRowList { get; set; }

    public List<ExpandoObject> Orders { get; set; } = new List<ExpandoObject>();
    private List<string> ToolbarItems = new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" };

    public List<Column> DaaAnalyticsColumn { get; set; }
    public class AnalyticsData
    {
        public List<Table> tables { get; set; }
    }

    public class Table
    {
        public string name { get; set; }
        public List<Column> columns { get; set; }
        public List<List<object>> rows { get; set; }
    }

    public class Column
    {
        public string name { get; set; }
        public string type { get; set; }
    }

    private SfGrid<AnalyticsData> Grid;
    private AnalyticsData analyticsData  { get; set; }
    private ActivityEventResponse _activityEventResponses { get; set; }
    private Blazorade.Msal.Security.AuthenticationResult token = null;
    // Specifies the DataSource value for TreeView component.
    List<TreeItem> TreeDataSource = new List<TreeItem>();
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.refGrid.ExcelExport();
        }
    }
    protected async override void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var   claims = user.Claims;
        userEmail = claims?.FirstOrDefault(x => x.Type.Equals("preferred_username", StringComparison.OrdinalIgnoreCase))?.Value;
        isAllowEdit = userEmail.Contains("qualiticks.com");
        Orders = Enumerable.Range(1, 75).Select((x) =>
        {
            dynamic d = new ExpandoObject();
            d.OrderID = 1000 + x;
            d.CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)];
            d.Freight = (new double[] { 2, 1, 4, 5, 3 })[new Random().Next(5)] * x;
            d.OrderDate = (new DateTime[] { new DateTime(2010, 11, 5), new DateTime(2018, 10, 3), new DateTime(1995, 9, 9), new DateTime(2012, 8, 2), new DateTime(2015, 4, 11) })[new Random().Next(5)];
            d.ShipCountry = (new string[] { "USA", "UK" })[new Random().Next(2)];
            d.Verified = (new bool[] { true, false })[new Random().Next(2)];

            return d;
        }).Cast<ExpandoObject>().ToList<ExpandoObject>();

        base.OnInitialized();
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "01",
            NodeText = "Power BI Access Logs",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "01-01", NodeText = "Logger test", Icon = "audio" }
            }
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "02",
            NodeText = "Data Lake Logs",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "02-01", NodeText = "Acces by Admin", Icon = "video" },
                new TreeItem { NodeId = "02-02", NodeText = "This is a test", Icon = "video" },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "03",
            NodeText = "Key Vault Access Logs",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "03-01", NodeText = "Environment Pollution.docx", Icon = "docx" },
                new TreeItem { NodeId = "03-02", NodeText = "Global Water, Sanitation, & Hygiene.docx", Icon = "docx" },
                new TreeItem { NodeId = "03-03", NodeText = "Global Warming.ppt", Icon = "ppt" },
                new TreeItem { NodeId = "03-04", NodeText = "Social Network.pdf", Icon = "pdf" },
                new TreeItem { NodeId = "03-05", NodeText = "Youth Empowerment.pdf", Icon = "pdf" },
            },
        });
        await DoAuthenticationAnalytics();
        await MergeLog();
        StateHasChanged();

    }

    class TreeItem
    {
        public string NodeId { get; set; }
        public string NodeText { get; set; }
        public string Icon { get; set; }
        public string ImageUrl { get; set; }
        public bool Expanded { get; set; }
        public bool Selected { get; set; }
        public List<TreeItem> Child;
    }

    public async void CellSave(CellSaveArgs<AnalyticsRow> arg)
    {  
        try{

            if (arg.Data != null && arg.Data.Comments !=null) {

                LogModel model = new LogModel();
                int n;
                bool isNumeric = int.TryParse(arg.Data.ID, out n);
                model.Id = isNumeric ? n : 0;
                model.Comments = arg.Data.Comments;
                model.CorrelationId = arg.Data.CorrelationId;
                await _logService.UpsertLog(model);  
                await DoAuthenticationAnalytics();
                await MergeLog();
                StateHasChanged();
            }  
        }catch(Exception ex)
        {

        }

    }

    private const string AuthorityFormat = "https://login.microsoftonline.com/94e6b5f2-d1da-4de9-a4ca-88cfdb6c3de0/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";

    private async Task<Microsoft.Identity.Client.AuthenticationResult> DoAuthentication()
    {
        IConfidentialClientApplication daemonClient;
        daemonClient = ConfidentialClientApplicationBuilder.Create(_configuration.GetSection("AzureAd:ClientId").Value)
        .WithAuthority(string.Format(AuthorityFormat, _configuration.GetSection("AzureAd:TenantId").Value))
        .WithClientSecret(_configuration.GetSection("AzureAd:ClientSecret").Value)
        .Build();

        AuthenticationResult authResult = await daemonClient.AcquireTokenForClient(new[] { MSGraphScope }).ExecuteAsync();
        return authResult;
    }

    public class AnalyticsToken
    {
        public string token_type { get; set; }
        public string expires_in { get; set; }
        public string ext_expires_in { get; set; }
        public string expires_on { get; set; }
        public string not_before { get; set; }
        public string resource { get; set; }
        public string access_token { get; set; }

    }


    public class KustoQuery
    {
        public string query { get; set; }
    }

    private const string AnalyticsResource = "https://api.loganalytics.io";
    private const string AnalyticsQueryUrl = "https://api.loganalytics.io/v1/subscriptions/b77f6ddd-51a1-4811-8466-4068f9b84eac/resourceGroups/DAaaS-DEV/providers/Microsoft.KeyVault/vaults/qtx-DAaaS-Key-Vault-UAT/query?scope=hierarchy&timespan=P1D";
    private async Task DoAuthenticationAnalytics()
    {

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(user.Identity.Name);
            var customerTenantID = userNameGroupRolesModel.CustomerTenantId;
            var userVault = await _userVaultService.SearchUserVault(customerTenantID);

            var kustoqueryList = userVault.Select(x => x.Id).ToList();
            var _httpClient = new HttpClient();

            var clientId = _configuration.GetSection("AzureAd:ClientId").Value;
            var secret = _configuration.GetSection("AzureAd:ClientSecret").Value;
            var oauthUrl = _configuration.GetSection("AzureAd:Instance").Value + _configuration.GetSection("workSpaceId").Value + "/oauth2/token";
            var content = new FormUrlEncodedContent(new Dictionary
                                <string, string> {
                          { "client_id", clientId},
                          { "client_secret", secret},
                          { "grant_type", "client_credentials" },
                          { "resource", AnalyticsResource},
                        });

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, new Uri(oauthUrl))
                {
                    Content = content
                };

            using (var response = await _httpClient.SendAsync(httpRequestMessage))
            {
                if (response.IsSuccessStatusCode)
                {
                    var responseStream = await response.Content.ReadAsStringAsync();

                    AnalyticsToken analyticsToken = JsonConvert.DeserializeObject<AnalyticsToken>(responseStream);


                    var kustQuery = "";
                    int index = 0;
                    foreach(var l in kustoqueryList)
                    {
                        var str = "id_s contains \"" + string.Join("\", \"", l) + "\"" ;

                        if(kustoqueryList.Count -1 > index)
                        {
                            str+= " or ";   
                        }

                        kustQuery+= str;
                        index++;
                    }

                    var kusto = new KustoQuery();
                    kusto.query = "AzureDiagnostics\n| where id_s contains \"63\" or id_s contains \"72\" ";

                    kusto.query = "AzureDiagnostics\n| where " + kustQuery;

                    string jsonString = System.Text.Json.JsonSerializer.Serialize(kusto);

                    var content3 = new StringContent(jsonString, Encoding.UTF8, "application/json");
                    var httpRequestMessage2 = new HttpRequestMessage(HttpMethod.Post, new Uri(AnalyticsQueryUrl))
                        {
                            Content = content3
                        };

                    var _httpClient2 = new HttpClient();
                    _httpClient2.DefaultRequestHeaders.Add("Authorization", "Bearer " + analyticsToken.access_token);

                    using (var response2 = await _httpClient2.SendAsync(httpRequestMessage2))
                    {
                        var responseStream2 = await response2.Content.ReadAsStringAsync();
                        analyticsData = JsonConvert.DeserializeObject<AnalyticsData>(responseStream2);
                        DaaAnalyticsColumn = analyticsData.tables?[0].columns;

                        analyticsRowList = new List<AnalyticsRow>();
                        foreach (var r in analyticsData.tables?[0].rows)
                        {
                            var analyticsRow = new AnalyticsRow();
                            analyticsRow.ID = Guid.NewGuid().ToString();
                            analyticsRow.TimeGenerated = r[1]?.ToString();
                            analyticsRow.Category = r[3]?.ToString();
                            analyticsRow.ResourceGroup = r[4]?.ToString();
                            analyticsRow.ResourceProvider = r[6]?.ToString();
                            analyticsRow.Resource = r[7]?.ToString();
                            analyticsRow.ResourceType = r[8]?.ToString();
                            analyticsRow.ResultType = r[10]?.ToString();
                            analyticsRow.CorrelationId = r[11]?.ToString();
                            analyticsRow.OperationName = r[9]?.ToString();
                            analyticsRow.ResultDescription = r[12]?.ToString();
                            analyticsRow.Tenant_G = r[13]?.ToString();
                            analyticsRow.RunbookName_s = r[15]?.ToString();
                            analyticsRow.StreamType_s = r[16]?.ToString();
                            analyticsRow.Caller_s = r[17]?.ToString();
                            analyticsRow.requestUri_s = r[18]?.ToString();
                            analyticsRow.Level = r[19]?.ToString();
                            analyticsRow.DurationMs = r[20]?.ToString();
                            analyticsRow.CallerIpAddress = r[21]?.ToString();
                            analyticsRow.status_s = r[25]?.ToString();
                            analyticsRow.LogicalServerName = r[26]?.ToString();
                            analyticsRow.Message = r[27]?.ToString();
                            analyticsRow.ruleName_s = r[33]?.ToString();
                            analyticsRow.EventName_s = r[37]?.ToString();
                            analyticsRow.startTime_t = r[55]?.ToString();
                            analyticsRow.endTime_t = r[56]?.ToString();
                            analyticsRow.DatabaseName_s = r[57]?.ToString();
                            analyticsRow.SourceSystem = r[111]?.ToString();
                            analyticsRow.Type = r[148]?.ToString();

                            analyticsRowList.Add(analyticsRow);
                        }
                    }

                    //Sync to DB
                    foreach (var item in analyticsRowList) { 

                        LogModel model = new LogModel();
                        model.CorrelationId = item.CorrelationId;
                        model.UserEmail =string.Empty;
                        model.Date = string.IsNullOrEmpty(item.TimeGenerated) ? DateTime.Now : Convert.ToDateTime(item.TimeGenerated);
                        model.Message = item.Message;
                        var res=   await _logService.UpsertLog(model);
                        item.Comments = res.Comments;
                    }

                }
                else
                {
                    ShowMessage("Authenticatin Failed!", AlertStatus.Danger);
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage(ex.Message, AlertStatus.Danger);
        }
    }

    public async Task ShowMessage(string message, string alertType)
    {

        MessageDialog.OpenDialog(alertType,message);
    }

    public async Task MergeLog() 
    {
        var logs = await _logService.GetLogs();
        logs = logs.Where(x =>x.CorrelationId== null || x.CorrelationId ==string.Empty ).ToList();
        if (analyticsRowList == null)
        {
            analyticsRowList = new List<AnalyticsRow>();
        }
        foreach (var l in logs) 
        {
            var analyticsRow = new AnalyticsRow();
            analyticsRow.ID = l.Id.ToString();
            analyticsRow.TimeGenerated = l.Date.ToShortDateString();
            analyticsRow.ResultDescription = (string.IsNullOrEmpty(l.Message)) ? "" : l.Message;
            analyticsRow.User = l.UserEmail;
            analyticsRow.Comments = l.Comments;
            analyticsRow.isEditable = userEmail.ToLower().Contains("qualiticks.com");
            analyticsRowList.Add(analyticsRow);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserSecurityService _userSecurityService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserVaultService _userVaultService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogService _logService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration _configuration { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazoradeMsalService msalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
