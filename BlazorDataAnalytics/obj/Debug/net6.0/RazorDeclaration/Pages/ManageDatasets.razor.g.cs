// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorDataAnalytics.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.RichTextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Azure.Storage.Blobs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Azure.Storage.Blobs.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Services.ReportDashboardService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Services.UserSecurityService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Services.DatasetGovernance;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Blazorade.Msal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.AnalysisServices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.AnalysisServices.Tabular;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.AspNetCore.Http.Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.Identity.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.PowerBI.Api;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.PowerBI.Api.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Microsoft.Rest;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Persistence.Config.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Services.BlobStorageService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Dax.Formatter;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using TooltipPosition = Syncfusion.Blazor.Popups.Position;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Syncfusion.Blazor.QueryBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Services.ServicePrincipalService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Services.LogService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
using BlazorDataAnalytics.Dialogs;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/datasets")]
    public partial class ManageDatasets : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1035 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Pages\ManageDatasets.razor"
       
    #region Measures
    private string Target { get; set; } = "body";
    private string DaxErrorMsg { get; set; }
    private bool IsShowMeasure { get; set; }
    SfGrid<Measure> MeasureGrid;
    TooltipPosition Position = TooltipPosition.BottomRight;
    SfTooltip sfToolTip;
    #endregion
    [CascadingParameter]
    public IModalService Modal { get; set; }
    SfMultiSelect<string[], DataSetDetail> mulObj { get; set; }

    private bool isWorkspaceAvailable { get; set; } = false;
    private string filterValue { get; set; }
    private bool isShowSpinner { get; set; } = false;
    public bool isCustomMeasure { get; set; } = false;
    private List<Measure> measureList = new List<Measure>();
    public string[] DropVal { get; set; }
    List<DataSetDetail> LstSQLViews = new List<DataSetDetail>();
    private List<Report> _reports { get; set; }
    private List<DatasetGovernance> _datasetGovernance = new List<DatasetGovernance>();
    private string functionValue { get; set; }
    SfToast ToastObj;
    private string ToastPosition = "Right";
    private List<string> function = new List<string>();
    List<ParquetData> parquetData = new List<ParquetData>();
    List<DataSetDetail> workspace = new List<DataSetDetail>();
    private List<string> sqlDatabases = new List<string>();
    private Guid _workspaceId;
    SfGrid<DataSetDetail> Grid;
    SfGrid<SingleColumnRelationship> GridRelationship;
    List<double> SelectIndex { get; set; }
    public string CssClass { get; set; }
    public string CssClass2 { get; set; }
    public string CssClassImport { get; set; } = "button-width";
    public string Content = "Create Dataset";
    public string Content2 = "Import";
    public string ContentRel = "Save..";
    public string ContentReport = "New Report";
    public string Content3 = "New Report";
    public string CssClass3 = "e-hide-spinner";
    public bool showSpinner { get; set; } = false;
    private UserNameGroupRolesModel userNameGroupRolesModel = new UserNameGroupRolesModel();
    private string userNameIdentity { get; set; }
    private string CustomerName { get; set; }
    private int _customerTenantId { get; set; }
    private bool isChecked { get; set; } = false;
    private bool isShowWarning { get; set; } = false;
    private bool isDeletion { get; set; } = false;
    private bool isDisableFilter { get; set; } = false;
    private bool enableButtonSavePartition { get; set; } = false;
    List<Object> Toolbaritems;
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "450px" };

    public class DataSetDetail
    {
        public bool IsCheckedList { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime? CreatedDate { get; set; }
        public DateTime? RefreshDate { get; set; }
        public string Id { get; set; }
        public List<ColumnEntry> columns { get; set; }
    }
    public class ColumnEntry
    {
        public string columnName { get; set; }
        public string DataType { get; set; }
    }
    public class RelationshipTable
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    public class TableColumn
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    public class TableWithColumnList
    {
        public string TableName { get; set; }
        public List<TableColumn> cols { get; set; }
    }

    public class SingleColumnRelationship
    {
        public string ID { get; set; }
        public string OriginalName { get; set; }
        public string Name { get; set; }
        public string FromTable { get; set; }
        public string FromColumn { get; set; }
        public string ToTable { get; set; }
        public string ToColumn { get; set; }

    }


    private List<DataSetDetail> _datasetsList = new List<DataSetDetail>();
    private bool VisibilityDatasetDialog { get; set; } = false;
    private bool VisibilityImportDialog { get; set; } = false;
    private bool VisibilityUploadReport { get; set; } = false;
    private bool VisibilityNewReportDialog { get; set; } = false;
    private string datasetName { get; set; }
    private string datasetDesc { get; set; }
    public bool enableButton { get; set; } = false;
    private bool disableImport { get; set; } = false;
    private List<FileStream> _listFile = new List<FileStream>();
    private string warningMessage { get; set; }
    private string reportName { get; set; }
    private bool enableButtonDataset { get; set; } = false;
    private bool enableButtonImport { get; set; } = false;
    private bool enableButtonReport { get; set; } = false;
    private bool IsSFGridHasSelecion { get; set; } = false;
    private bool IsShowGovernance { get; set; } = false;
    private bool IsShowManageRelationship { get; set; } = false;
    private string txtRelationshipName { get; set; }
    private string cmbFromTableValue { get; set; }
    private string cmbToTableValue { get; set; }
    private string cmbToColumnValue { get; set; }
    private string cmbFromColumnValue { get; set; }
    private List<RelationshipTable> cmbFromTable = new List<RelationshipTable>();
    private List<RelationshipTable> cmbToTable = new List<RelationshipTable>();
    private List<TableColumn> cmbFromColumn = new List<TableColumn>();
    private List<TableColumn> cmbToColumn = new List<TableColumn>();
    private List<TableWithColumnList> tablewithCols { get; set; }
    private Microsoft.AnalysisServices.Tabular.Model serverModel = new Microsoft.AnalysisServices.Tabular.Model();
    private Microsoft.AnalysisServices.Tabular.Server Server = new Microsoft.AnalysisServices.Tabular.Server();
    private Microsoft.AnalysisServices.Tabular.Database database = new Microsoft.AnalysisServices.Tabular.Database();
    private List<SingleColumnRelationship> relationshipList = new List<SingleColumnRelationship>();
    private string _profileId = string.Empty;

    MessageBoxDialog MessageDialog;

    protected override async Task OnInitializedAsync()
    {
        try
        {


            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            userNameIdentity = user?.Identity?.Name;
            userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(userNameIdentity);

            if (userNameGroupRolesModel.WorkspaceId == Guid.Empty)
            {
                showSpinner = false;
                return;
            }
            isWorkspaceAvailable = true;
            _customerTenantId = userNameGroupRolesModel.CustomerTenantId;

            _workspaceId = userNameGroupRolesModel.WorkspaceId; //Customer Workspace
            CustomerName = userNameGroupRolesModel.CustomerName;
            var customerTenant = await _userSecurityService.GetCustomerTenants(_customerTenantId);
            if (customerTenant.ProfileId > 0)
            {
                var profile = _iAppOwnsDataMultiTenantDbService.GetProfileById((int)customerTenant.ProfileId);
                _profileId = profile != null ? profile.ProfileId : null;
            }
            //    CustomerName = userNameGroupRolesModel.
            function.Add("COUNT");
            function.Add("SUM");
            function.Add("MIN");
            function.Add("MAX");
            _rolememberType = new List<string>();
            _rolememberType.Add("Azure AD Member");
            _rolememberType.Add("Windows AD Member");
            List<TOMColumns> testData = new List<TOMColumns>();
            TOMColumns itemdata = new TOMColumns();
            itemdata.columnName ="ID";
            itemdata.dataType = Syncfusion.Blazor.QueryBuilder.ColumnType.String;
            testData.Add(itemdata);

            selectedTableColumn = testData.AsEnumerable<TOMColumns>();

            await RebindData();
            showSpinner = false;
            StateHasChanged();
        }
        catch (Exception ex) { }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (userNameGroupRolesModel.WorkspaceId == Guid.Empty)
            {
                showSpinner = false;
                return;
            }
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var claims = user.Claims;
            var userEmail = claims?.FirstOrDefault(x => x.Type.Equals("preferred_username", StringComparison.OrdinalIgnoreCase))?.Value;

            await RebindData();
            if (Grid != null) Grid.SelectedRecords.Add(_datasetsList.FirstOrDefault());
            StateHasChanged();
        }

    }
    private void OnBtnClick()
    {
        if (userNameGroupRolesModel.WorkspaceId == Guid.Empty)
        {
            showSpinner = false;
            showAlertMessage(AlertStatus.Warning, "No available workspace!", "Warning");
            return;
        }
        getDatabases();
        this.VisibilityDatasetDialog = !this.VisibilityDatasetDialog;
        StateHasChanged();

    }
    private void OnBtnClick2()
    {
        this.VisibilityImportDialog = !this.VisibilityImportDialog;
    }
    private void OnBtnClick3()
    {
        this.VisibilityUploadReport = !this.VisibilityUploadReport;
    }

    #region Dataset Governance
    private void DatasetGovernance()
    {
        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Warning, "Please select an existing dataset from below", "Warning Message!");
            return;
        }

        IsShowGovernance = !IsShowGovernance;
        if (IsShowGovernance)
        {
            _datasetGovernance = _datasetGovernanceService.getDataGovernance(Grid.SelectedRecords.FirstOrDefault().Id);
        }
    }
    //Events
    public async void ActionComplete(ActionEventArgs<Persistence.Config.Entities.DatasetGovernance> args)
    {
        DatasetGovernanceModel model = new DatasetGovernanceModel();

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            // Triggers once save operation completes
            model.Action = args.Data.Action;
            model.Criteria = args.Data.Criteria;
            model.DatasetId = Grid.SelectedRecords.FirstOrDefault().Id;
            model.Name = args.Data.Name;
            model.Id = args.Data.Id;
            await _datasetGovernanceService.UpsertDatasetGovernance(model);
            _datasetGovernance = _datasetGovernanceService.getDataGovernance(Grid.SelectedRecords.FirstOrDefault().Id);
            StateHasChanged();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers once delete operation completes
            await _datasetGovernanceService.DeleteDatasetGovernance(args.Data.Id);
            _datasetGovernance = _datasetGovernanceService.getDataGovernance(Grid.SelectedRecords.FirstOrDefault().Id);
            StateHasChanged();
        }
    }

    #endregion

    #region Measures
    private async void Measures()
    {

        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Warning, "Please select an existing dataset from below", "Warning Message!");
            return;
        }
        isShowSpinner = true;
        StateHasChanged();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims;
        var userEmail = claims?.FirstOrDefault(x => x.Type.Equals("preferred_username", StringComparison.OrdinalIgnoreCase))?.Value;
        AuthenticationResult authenticationResult = null;
        authenticationResult = await DoAuthentication();
        DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
        Server = dsman.getCustomerServer();
        database = Server.Databases.GetByName(Grid.SelectedRecords.FirstOrDefault().Name);
        serverModel = database.Model;
        relationshipList = new List<SingleColumnRelationship>();
        if (serverModel != null)
        {
            cmbFromTable = new List<RelationshipTable>();
            cmbToTable = new List<RelationshipTable>();
            tablewithCols = new List<TableWithColumnList>();
            foreach (var item in serverModel.Tables.Select((value, i) => new { i, value }))
            {
                if (!item.value.Name.ToLower().Trim().Contains("datetabletemplate") && !item.value.Name.ToLower().Trim().Contains("localdatetable"))
                {
                    RelationshipTable tableItem = new RelationshipTable();
                    tableItem.ID = item.i.ToString();
                    tableItem.Text = item.value.Name;

                    cmbFromTable.Add(tableItem);
                    cmbToTable.Add(tableItem);

                    TableWithColumnList tableWithColumnItem = new TableWithColumnList();
                    tableWithColumnItem.cols = new List<TableColumn>();
                    tableWithColumnItem.TableName = item.value.Name;
                    foreach (var cols in item.value.Columns.Select((value, i) => new { i, value }))
                    {
                        TableColumn tableColumn = new TableColumn();
                        tableColumn.ID = cols.i.ToString();
                        tableColumn.Text = cols.value.Name;
                        tableWithColumnItem.cols.Add(tableColumn);
                    }
                    tablewithCols.Add(tableWithColumnItem);
                }
                foreach (var measureItem in item.value.Measures)
                {
                    Measure mesItem = new Measure();
                    mesItem.Name = measureItem.Name;
                    mesItem.OriginalName = measureItem.Name;
                    mesItem.DataType = measureItem.DataType;
                    mesItem.Description = measureItem.Description;
                    mesItem.ModifiedTime = measureItem.ModifiedTime;
                    mesItem.SourceTable = measureItem.Table.Name;
                    mesItem.Expression = measureItem.Expression;
                    mesItem.TableValue = measureItem.Expression;
                    measureList.Add(mesItem);
                }
            }

        }

        MeasureGrid.Refresh();
        IsShowMeasure = !IsShowMeasure;
        isShowSpinner = false;
        StateHasChanged();
    }
    //Events
    public async void ActionBeginHandlerMeasure(ActionEventArgs<Measure> args)
    {
        cmbFromColumn = new List<TableColumn>();
        cmbToColumn = new List<TableColumn>();
        if (isCustomMeasure && args.Data != null && args.Data.Expression != string.Empty)
        {
            var checkError = FormatInvalidExpression(args.Data.Expression);
            if (checkError != string.Empty)
            {
                showAlertMessage(AlertStatus.Danger, checkError, "Error!");
                args.Action = null;
                args.RequestType = Syncfusion.Blazor.Grids.Action.Add;
                return;
            }
        }
    }

    private async Task OnFilter(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var query = new Query().Where(new WhereFilter() { Field = "Name", Operator = "contains", value = args.Text, IgnoreCase = true });

        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();

        await mulObj.FilterAsync(LstSQLViews, query);
    }
    public async void ActionCompleteMeasure(ActionEventArgs<Measure> args)
    {
        if (args.Action == "Add")
        {
            if (args.Data.TableValue == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Source Table", "Warning!"); return; }
            if (!isCustomMeasure && args.Data.ColumnValue == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Column", "Warning!"); return; }
            if (!isCustomMeasure && args.Data.FunctionValue == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Function", "Warning!"); return; }
            if (isCustomMeasure && args.Data.Expression == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Customize Expression", "Warning!"); return; }
            //   serverModel.Tables[cmbFromTableValue].Partitions
            string query = string.Empty;
            if (!isCustomMeasure)
            {
                switch (args.Data.FunctionValue)
                {
                    case "COUNT":
                        query = string.Format(@"COUNT('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    case "SUM":
                        query = string.Format(@"SUM('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    case "MIN":
                        query = string.Format(@"MIN('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    case "MAX":
                        query = string.Format(@"MAX('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    default:
                        break;
                }
            }

            Microsoft.AnalysisServices.Tabular.Measure measure = new Microsoft.AnalysisServices.Tabular.Measure();
            measure.Name = args.Data.Name;
            measure.Expression = isCustomMeasure ? args.Data.Expression : query;


            serverModel.Tables[args.Data.TableValue].Measures.Add(measure);

            // database.Update(Microsoft.AnalysisServices.UpdateOptions.Default);
            serverModel.SaveChanges();
            measureList = new List<Measure>();
            foreach (var item in serverModel.Tables)
            {
                foreach (var measureItem in item.Measures)
                {
                    Measure mesItem = new Measure();
                    mesItem.Name = measureItem.Name;
                    mesItem.OriginalName = measureItem.Name;
                    mesItem.DataType = measureItem.DataType;
                    mesItem.Description = measureItem.Description;
                    mesItem.ModifiedTime = measureItem.ModifiedTime;
                    mesItem.SourceTable = measureItem.Table.Name;
                    mesItem.Expression = measureItem.Expression;
                    measureList.Add(mesItem);
                }
            }
            showAlertMessage(AlertStatus.Success, "Measure has been saved!", "Success!");

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

            if (!isCustomMeasure && args.Data.TableValue == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Source Table", "Warning!"); }
            if (!isCustomMeasure && args.Data.ColumnValue == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Column", "Warning!"); }
            if (!isCustomMeasure && args.Data.FunctionValue == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Function", "Warning!"); }
            if (isCustomMeasure && args.Data.Expression == string.Empty) { showAlertMessage(AlertStatus.Warning, "Please Provide Customize Expression", "Warning!"); }
            //   serverModel.Tables[cmbFromTableValue].Partitions
            string query = string.Empty;
            if (!isCustomMeasure)
            {
                switch (args.Data.FunctionValue)
                {
                    case "COUNT":
                        query = string.Format(@"COUNT('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    case "SUM":
                        query = string.Format(@"SUM('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    case "MIN":
                        query = string.Format(@"MIN('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    case "MAX":
                        query = string.Format(@"MAX('{0}'[{1}])", args.Data.TableValue, args.Data.ColumnValue);
                        break;
                    default:
                        break;
                }
            }

            var updatedItem = serverModel.Tables[args.Data.SourceTable].Measures.Where(x => x.Name == args.Data.OriginalName).FirstOrDefault();


            updatedItem.Name = args.Data.Name;
            updatedItem.Description = args.Data.Description;
            updatedItem.Expression = isCustomMeasure ? args.Data.Expression : query;

            serverModel.SaveChanges();
            measureList = new List<Measure>();
            foreach (var item in serverModel.Tables)
            {
                foreach (var measureItem in item.Measures)
                {
                    Measure mesItem = new Measure();
                    mesItem.Name = measureItem.Name;
                    mesItem.OriginalName = measureItem.Name;
                    mesItem.DataType = measureItem.DataType;
                    mesItem.Description = measureItem.Description;
                    mesItem.ModifiedTime = measureItem.ModifiedTime;
                    mesItem.SourceTable = measureItem.Table.Name;
                    mesItem.Expression = measureItem.Expression;
                    measureList.Add(mesItem);
                }
            }
            showAlertMessage(AlertStatus.Success, "Measure successfully updated!", "Success!");

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            serverModel.Tables[args.Data.SourceTable].Measures.Remove(args.Data.Name);
            measureList = new List<Measure>();
            foreach (var item in serverModel.Tables)
            {
                foreach (var measureItem in item.Measures)
                {
                    Measure mesItem = new Measure();
                    mesItem.Name = measureItem.Name;
                    mesItem.OriginalName = measureItem.Name;
                    mesItem.DataType = measureItem.DataType;
                    mesItem.Description = measureItem.Description;
                    mesItem.ModifiedTime = measureItem.ModifiedTime;
                    mesItem.SourceTable = measureItem.Table.Name;
                    mesItem.Expression = measureItem.Expression;
                    measureList.Add(mesItem);
                }
            }
            serverModel.SaveChanges();
            showAlertMessage(AlertStatus.Success, "Measure has been Deleted!", "Success!");

        }


    }


    #endregion
    #region Edit/Delete,Refresh Dataset 
    List<DataSetDetail> LstSQLViews_AddDataset = new List<DataSetDetail>();
    SfTreeView<TreeViewData> TreeRef;
    private string MQueryColumnName { get; set; }
    private string mqueryVal { get; set; } = "=";
    private bool isCheckedAdvanceEditor { get; set; } = false;
    private bool IsShowContextMenu { get; set; } = false;
    private bool IsShowEditDataset { get; set; } = false;
    private bool IsShowAddDatasetTable { get; set; } = false;
    private bool IsShowEditDatasetTable { get; set; } = false;
    private bool IsSelected { get; set; } = false;
    private bool IsShowAddCustomColumn { get; set; } = false;
    private Model datasetModel { get; set; }
    private string DatasetName { get; set; }
    public List<TreeViewData> TreeDataSource = new List<TreeViewData>();
    string[] CheckedNodes = new string[] { };
    private bool isEnableCustomColumnOKbtn { get; set; } = false;
    public string datatypeDropdownVal { get; set; }
    SfTooltip custColTolTip;
    SfGrid<TreeViewData> sfGridEditDSTable;
    public class Script
    {
        public string Name { get; set; }
    }
    List<Script> ListIntellisense = new List<Script>();
    List<Script> Intellisense = new List<Script>() {
        new Script() { Name = $@"#""Salesforce-Account"""},
        new Script() { Name = "[Email]"},
        new Script() { Name = "[EmailBouncedDate]"},
        new Script() { Name = "[EmailBouncedReason]"},
        new Script() { Name = "[IsEmailBounced]"},
        new Script() { Name = "[Account Id]"},
        new Script() { Name = "[AssistantName]"},
        new Script() { Name = "[AssistantPhone]"},
        new Script() { Name = "[LastActivityDate]"},
        new Script() { Name = "[MailingGeocodeAccuracy]"},
        new Script() { Name = "[OtherGeocodeAccuracy]"},
        new Script() { Name = "Access.Database"},
        new Script() { Name = "AccessControlEntry.ConditionContextType"},
        new Script() { Name = "AccessControlEntry.ConditionToIdentities"},
        new Script() { Name = "AccessControlEntry.Type"},
        new Script() { Name = "AccessControlkind.Deny"},
        new Script() { Name = "AccessControlkind.Allow"},
        new Script() { Name = "AccessControlkind.Type"},
        new Script() { Name = "Acterys.Contents"},
        new Script() { Name = "Actian.Contents"},
        new Script() { Name = "ActiveDirectory.Domains"},
        new Script() { Name = "AdobeAnalytics.Cubes"},
        new Script() { Name = "AdoDotNet.DataSource"},
        new Script() { Name = "AdoDotNet.Query"},
        new Script() { Name = "AI.ExecuteInProc"},
        new Script() { Name = "AI.ExecuteInternal"},
        new Script() { Name = "AI.ExternalSort"},
        new Script() { Name = "AI.GetAutoMLEntity"},
        new Script() { Name = "AI.SampleStratifiedWithHoldout"},
        new Script() { Name = "AI.TestConnection"},
        new Script() { Name = "AIFunctions.Capacities"},
        new Script() { Name = "AIFunctions.Contents"},
        new Script() { Name = "AIFunctions.PostProcess"},
        new Script() { Name = "AlInsights.Contents"},
        new Script() { Name = "AlInsights.ContentsGenerator"},
        new Script() { Name = "AmazonAthena.Databases"},
        new Script() { Name = "AmazonOpenSearchService.Contents"},
        new Script() { Name = "AmazonRedshift.Database"},
        new Script() { Name = "AML.Execute"},
        new Script() { Name = "appFigures.Content"},
        new Script() { Name = "appFigures.Tables"},
        new Script() { Name = "AutodeskConstructionCloud.Contents"},
        new Script() { Name = "AutomationAnywhere.Feed"},
        new Script() { Name = "AutomyDataAnalytics.Contents"},
        new Script() { Name = "AzureCostManagement.Contents"},
        new Script() { Name = "AzureCostManagement.Tables"},
        new Script() { Name = "AzureDataExplorer.Contents"},
        new Script() { Name = "AzureDataExplorer.Databases"},
        new Script() { Name = "AzureDevOpsServer.Feed"},
        new Script() { Name = "AzureDevOpsServer.Views"},
        new Script() { Name = "AzureEnterprise.Tables"},
        new Script() { Name = "AzureEnterprise.Contents"},
        new Script() { Name = "AzureHiveLLAP.Database"},
        new Script() { Name = "AzureMLFunctions.Contents"},
        new Script() { Name = "AzureMLFunctions.Execute"},
        new Script() { Name = "AzureMLFunctions.ExecuteBatch"},
        new Script() { Name = "AzureSpark.Tables"},
        new Script() { Name = "AzureStorage.DataLakeContents"},
        new Script() { Name = "AzureStorage.Tables"},
        new Script() { Name = "AzureStorage.BlobContents"},
        new Script() { Name = "AzureStorage.Blobs"},
        new Script() { Name = "AzureStorage.DataLake"},
        new Script() { Name = "AzureStorage.BlobContents"},
        new Script() { Name = "AzureTimeSeriesInsights.Contents"},
        new Script() { Name = "Binary.ApproximateLength"},
        new Script() { Name = "Cherwell.SavedSearches"},
        new Script() { Name = "Combiner.CombineTextByEachDelimiter"},
        new Script() { Name = "CommonDataService.Database"},
        new Script() { Name = "CsvStvle.QuoteAlways"},
        new Script() { Name = "CsvStyle.QuoteAfterDelimiter"},
        new Script() { Name = "CsvStyle.QuoteAlways"},
        new Script() { Name = "CsvStyle.Type"},
        new Script() { Name = "Cube.CollapseAndRemoveColumns"},
        new Script() { Name = "Dynamics365BusinessCentral.EnvironmentContents"},
        new Script() { Name = "Emigo.Contents"},
        new Script() { Name = "Emigo.GetExtractFunction"},
        new Script() { Name = "EmigoDataSourceConnector.NavigationFunctionType"},
        new Script() { Name = "EmigoDataSourceConnector.GetExtractFunction"},
        new Script() { Name = "IndustrialAppStore.NavigationTable"},
        new Script() { Name = "JoinAlgorithm.Dynamic"},
        new Script() { Name = "JoinAlgorithm.LeftIndex"},
        new Script() { Name = "JoinAlgorithm.PairwiseHash"},
        new Script() { Name = "JoinAlgorithm.RightHash"},
        new Script() { Name = "JoinAlgorithm.RightIndex"},
        new Script() { Name = "JoinAlgorithm.SortMerge"},
        new Script() { Name = "JoinAlgorithm.Type"},
        new Script() { Name = "Joinkind.LeftAnti"},
        new Script() { Name = "Joinkind.RightAnti"},
        new Script() { Name = "LimitClauseKind.AnsiSq12008"},
        new Script() { Name = "LinkedIn.SalesNavigatorAnalyticsImpl"},
        new Script() { Name = "LinkedIn.SalesNavigatorAnalytics"},
        new Script() { Name = "List.Accumulate"},
        new Script() { Name = "List.AllTrue"},
        new Script() { Name = "List.Alternate"},
        new Script() { Name = "List.AnyTrue"},
        new Script() { Name = "List.Average"},
        new Script() { Name = "List.MatchesAny"},
        new Script() { Name = "List.ContainsAny"},
        new Script() { Name = "Mailchimp.TablesV2"},
        new Script() { Name = "MicrosoftAzureConsumptionInsights.Test"},
        new Script() { Name = "MicrosoftAzureConsumptionInsights.Tables"},
        new Script() { Name = "Number.Abs"},
        new Script() { Name = "Number.Acos"},
        new Script() { Name = "Number.Asin"},
        new Script() { Name = "Number.Atan"},
        new Script() { Name = "Number.Atan2"},
        new Script() { Name = "Number.BitwiseAnd"},
        new Script() { Name = "Number.RoundAwayFromZero"},
        new Script() { Name = "Occurrence.All"},
        new Script() { Name = "Order.Ascending"},
        new Script() { Name = "Order.Ascending"},
        new Script() { Name = "QuoteStyle.Csv"},
        new Script() { Name = "Record.AddField"},
        new Script() { Name = "Record.AddField"},
        new Script() { Name = "Resource.Access"},
        new Script() { Name = "SapBusinessWarehouseExecutionMode.BasXml"},
        new Script() { Name = "SapBusinessWarehouseExecutionMode.BasXmlGzip"},
        new Script() { Name = "SapHanaDistribution.All"},
        new Script() { Name = "SparkProtocol.Azure"},
        new Script() { Name = "Splitter.SplitTextByAnyDelimiter"},
        new Script() { Name = "Splitter.SplitTextByEachDelimiter"},
        new Script() { Name = "Table.AddFuzzyClusterColumn"},
        new Script() { Name = "Table.AddJoinColumn"},
        new Script() { Name = "Table.AddKey"},
        new Script() { Name = "Table.AddRankColumn"},
        new Script() { Name = "Table.SplitAt"},
        new Script() { Name = "Table.AddColumn"},
        new Script() { Name = "Table.AddIndexColumn"},
        new Script() { Name = "Table.AddJoinColumn"},
        new Script() { Name = "Table.AggregateTableColumn"},
        new Script() { Name = "Table.AlternateRows"},
        new Script() { Name = "Table.ApproximateRowCount"},
        new Script() { Name = "Table.ContainsAll"},
        new Script() { Name = "Table.ContainsAny"},
        new Script() { Name = "Table.MatchesAllRows"},
        new Script() { Name = "Table.MatchesAnyRows"},
        new Script() { Name = "Table.MatchesAnyRows"},
        new Script() { Name = "Table.PositionOfAny"},
        new Script() { Name = "Table.PositionOfAny"},
        new Script() { Name = "TeamsAnalytics.Contents"},
        new Script() { Name = "Text.AfterDelimiter"},
        new Script() { Name = "Text.PositionOfAny"},
        new Script() { Name = "Text.SplitAny"},
        new Script() { Name = "Text.At"},
        new Script() { Name = "TextEncoding.Ascii"},
        new Script() { Name = "Type.AddTableKey"},
        new Script() { Name = "Type.AddTablekey"},
        new Script() { Name = "Value.Add"},
        new Script() { Name = "Value.Alternates"},
        new Script() { Name = "VSTS.AccountContents"},
        new Script() { Name = "WebAction.Request"},
        new Script() { Name = "WebtrendsAnalytics.Tables"},
        new Script() { Name = "WorkplaceAnalytics.Data"},
    };
    public class TreeViewData
    {
        public Microsoft.AnalysisServices.Tabular.Table datasetTables = new Microsoft.AnalysisServices.Tabular.Table();
        public string Id { get; set; }
        public string Name { get; set; }
        public string OriginalName { get; set; }
        public DatasetDatatypes DataTypeStrings = new DatasetDatatypes();
        public string dsDesc{ get; set; }
        public List<TreeViewData> Child = new List<TreeViewData>();
        public Microsoft.AnalysisServices.Tabular.MPartitionSource partitionSource = new Microsoft.AnalysisServices.Tabular.MPartitionSource();
    }
    public TreeViewData ColumnsToEdit = new TreeViewData();
    SfContextMenu<MenuItem> menu;
    string selectedId;
    public string[] selectedNodes = Array.Empty<string>();
    public string[] expandedNodes = new string[] { "" };
    public List<DatasetDatatypes> DatasetColsDataTypeStrings = new List<DatasetDatatypes>(){

      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Automatic,dsDesc= "Automatic" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Int64,dsDesc= "Integer / Whole Number (int64)" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.DateTime,dsDesc= "Datetime" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Decimal,dsDesc= "Currency / Fixed Decimal Number (decimal)" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Double,dsDesc= "Floating Point / Decimal Number (double)" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.String,dsDesc= "String / Text" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Boolean,dsDesc= "Boolean / (true/false)" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Unknown,dsDesc= "Unknown" },
      new DatasetDatatypes{dataType= Microsoft.AnalysisServices.Tabular.DataType.Variant,dsDesc= "Variant" }
    };

    public class DatasetDatatypes
    {
        public Microsoft.AnalysisServices.Tabular.DataType dataType { get; set; }   
        public string dsDesc { get; set; }            
    }
    private List<Microsoft.AnalysisServices.Tabular.Table> datasetTables = new List<Microsoft.AnalysisServices.Tabular.Table>();
    private async Task EditDataset(DataSetDetail detail)
    {
        try
        {
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();
            DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
            datasetModel = dsman.GetAllTablesFromCustomerWorkspace(detail.Name);
            DatasetName = detail.Name;
            getDatasetTables(datasetModel.Tables);
            IsShowEditDataset = true;
            IsShowEditDatasetTable = false;
            IsShowAddDatasetTable = false;
            IsSelected = false;
            isCheckedAdvanceEditor = false;
        }
        catch (Exception ex) { showAlertMessage(AlertStatus.Success, ex.Message); }
        StateHasChanged();
    }
    private async Task RefreshDataset(DataSetDetail detail)
    {
        AuthenticationResult authenticationResult = null;
        authenticationResult = await DoAuthentication();
        DatasetManager dsman = new DatasetManager(authenticationResult, _profileId);

        try
        {
            dsman.RefreshDataset(_workspaceId, detail.Id, _profileId

            );
            showAlertMessage(AlertStatus.Success, "Dataset: " + detail.Name + " successfully refreshed!", "Success Message!");
            await RebindData();
        }
        catch (Exception ex)
        {
            showAlertMessage(AlertStatus.Danger, ex.Message, "Error Message!");
        }
    }
    private void getDatasetTables(TableCollection tables)
    {
        TreeDataSource = new List<TreeViewData>();
        LstSQLViews_AddDataset = LstSQLViews;
        try
        {
            foreach (Microsoft.AnalysisServices.Tabular.Table item in tables.Where(x => !x.Name.StartsWith("LocalDateTable") && !x.Name.StartsWith("DateTableTemplate")))
            {
                TreeViewData data = new TreeViewData();
                data.Id = Guid.NewGuid().ToString();
                data.Name = item.Name;
                var name = LstSQLViews_AddDataset.Where(x => x.Name.Replace("DAaaS-Qualiticks", "").Replace("-", "").Replace("|", "").Replace("Qualiticks", "").Trim().Contains(item.Name.Replace("-", ""))).FirstOrDefault();
                try { LstSQLViews_AddDataset = LstSQLViews_AddDataset.Where(x => !x.Name.Replace("DAaaS-Qualiticks", "").Replace("-", "").Replace("|", "").Replace("Qualiticks", "").Replace(CustomerName, "").Trim().Contains(item.Name.Replace("-", ""))).ToList(); } catch (Exception ex) { }
                foreach( Microsoft.AnalysisServices.Tabular.Partition  partition  in item.Partitions){
                    var source = (Microsoft.AnalysisServices.Tabular.MPartitionSource)partition.Source;
                    data.partitionSource= source;
                }
                foreach (var col in item.Columns)
                {

                    TreeViewData cols = new TreeViewData();
                    cols.Id = data.Id;
                    cols.Name = col.Name;
                    cols.OriginalName = col.Name;
                    cols.dsDesc = DatasetColsDataTypeStrings.Where(x => x.dataType == col.DataType).FirstOrDefault()?.dsDesc??"";
                    cols.DataTypeStrings = DatasetColsDataTypeStrings.Where(x => x.dataType == col.DataType).FirstOrDefault();
                    data.Child.Add(cols);

                }
                if (TreeDataSource.Where(x => x.Name == item.Name).FirstOrDefault() == null)
                    TreeDataSource.Add(data);
            }
            TreeRef.Refresh();
        }
        catch (Exception ex) { }

    }
    private async Task OnBtnDeleteClick()
    {
        if (!string.IsNullOrEmpty(selectedId))
        {
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();
            DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
            Server = dsman.getCustomerServer();
            database = Server.Databases.GetByName(DatasetName);
            datasetModel = database.Model;

            // List<TreeViewData> tree = TreeRef.GetTreeData(selectedId);
            var record = TreeDataSource.Where(x=> x.Id == selectedId).FirstOrDefault();
            if (record != null)
            { 
                try 
                {
                    datasetModel.Tables.Remove(record.Name);
                    datasetModel.SaveChanges();
                    TreeDataSource.Remove(TreeDataSource.Where(x => x.Id == selectedId).FirstOrDefault()); 
                } catch (Exception ex) { showAlertMessage(AlertStatus.Danger, ex.Message, "Error!"); }
            }

            SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(_configuration.GetConnectionString("XeroConnection"));
            dsman.PatchSqlDatasourceCredentials(_workspaceId, database.ID, AppSettings.sqlUserName, AppSettings.sqlUserPassword, _profileId, connectionStringBuilder.DataSource.ToString());
            showAlertMessage(AlertStatus.Success, "Dataset updated successfully!", "Success!");
        }

        StateHasChanged();
    }
    private async Task OnBtnAddDatasetClick()
    {
        if (DropVal.Count() > 0)
        {
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();
            DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
            Server = dsman.getCustomerServer();
            database = Server.Databases.GetByName(DatasetName);
            datasetModel = database.Model;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var message = "Update Dataset with Id: " + Server.ID + " and Name: " + Server.Name;
            var log = new LogModel { Date = DateTime.Now, Module = "Dataset", UserEmail = user.Identity.Name, Message = message };
            await _logService.Log(log);

            foreach (var item in DropVal)
            {
                string[] table = item.Split("|");
                if (datasetModel.Tables.Where(x => x.Name == table[1]).FirstOrDefault() == null)
                {
                    var views = LstSQLViews.Where(x => x.Name == item).FirstOrDefault();
                    if (views != null)
                    {
                        string[] tableName = views.Name.Split("|");
                        CreateDynamicTable(datasetModel, tableName[1].Trim(), views.columns);
                    }
                }
            }


            Console.WriteLine(" Saving new database model using TOM");
            try
            {
                database.Update(Microsoft.AnalysisServices.UpdateOptions.ExpandFull);
                datasetModel.SaveChanges();
                getDatasetTables(datasetModel.Tables);
                SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(_configuration.GetConnectionString("XeroConnection"));
                dsman.PatchSqlDatasourceCredentials(_workspaceId, database.ID, AppSettings.sqlUserName, AppSettings.sqlUserPassword, _profileId, connectionStringBuilder.DataSource.ToString());
                showAlertMessage(AlertStatus.Success, "Dataset updated successfully!", "Success!");
            }
            catch (Exception ex) { showAlertMessage(AlertStatus.Danger, ex.Message, "Error!"); }
        }

        StateHasChanged();
    }
    // Datasource for menu items
    public List<MenuItem> MenuItems = new List<MenuItem>{
        new MenuItem { Text = "Edit" },
        new MenuItem { Text = "Remove" },
        new MenuItem { Text = "Add" }
    };
    // Triggers when TreeView Node is selected
    public void OnSelect(NodeSelectEventArgs args)
    {
        this.selectedId = args.NodeData.Id;
    }

    // Triggers when TreeView node is clicked
    public void nodeClicked(NodeClickEventArgs args)
    {
        selectedId = args.NodeData.Id;
        selectedNodes = new string[] { args.NodeData.Id };
        IsSelected = true;
        this.IsShowAddDatasetTable = false;
        this.IsShowEditDatasetTable = false;
    }

    // To add a new node
    async Task AddNodes()
    {
        //// Expand the selected nodes
        //expandedNodes = new string[] { this.selectedId };
        //string NodeId = "tree_" + this.index.ToString();
        //ListData.Add(new EmployeeData
        //{
        //    Id = NodeId,
        //    Name = "NewItem",
        //    Pid = this.selectedId
        //});
        //await Task.Delay(100);
        //// Edit the added node.
        //await this.tree.BeginEditAsync(NodeId);
        //this.index = this.index + 1;

    }

    // To delete a tree node
    void RemoveNodes()
    {
        //  List<EmployeeData> removeNode = tree.GetTreeData(selectedId);
        //   ListData.Remove(removeNode.ElementAt(0));
    }

    // To edit a tree node
    async Task RenameNodes()
    {
        await this.TreeRef.BeginEdit(this.selectedId);
    }

    // Triggers when context menu is selected
    public async Task MenuSelect(MenuEventArgs<MenuItem> args)
    {
        string selectedText;
        selectedText = args.Item.Text;
        if (selectedText == "Edit")
        {
            await this.RenameNodes();
        }
        else if (selectedText == "Remove")
        {
            this.RemoveNodes();
        }
        else if (selectedText == "Add")
        {
            await this.AddNodes();
        }
    }
    void HandleClick(MouseEventArgs args)
    {
        Console.WriteLine("This is a left click");
    }

    void HandleMouseUp(MouseEventArgs args)
    {
        this.IsShowContextMenu = false;
        if (args.Button == 2){
            this.Target = "#dialog.e-dialog";
            this.IsShowContextMenu = true;

        }
    }
    private void OnBtnAddDatasetTableClick(){
        this.IsShowAddDatasetTable = true;
        this.IsShowEditDatasetTable = false;
        StateHasChanged();

    }
    private string datasetTableName { get; set; }
    private void OnBtnEditDatasetTableClick()
    {
        ColumnsToEdit = TreeDataSource.Where(x => x.Id.ToString() == selectedId.ToString()).FirstOrDefault();
        this.IsShowEditDatasetTable = true;
        this.IsShowAddDatasetTable = false;
        StateHasChanged();
    }
    private void ValueChange(ChangeEventArgs<string, DatasetDatatypes> args)
    {
        // Here, you can customize your code.
    }
    public async void ActionCompleteUpdateDSTable(ActionEventArgs<TreeViewData> args)
    {
        isShowSpinner = false;

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {


        }
        else if (args.Action == "Add"){
            // Triggers once cancel operation completes
            try{
                isShowSpinner = true;
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();
                DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                Server = dsman.getCustomerServer();
                database = Server.Databases.GetByName(DatasetName);
                datasetModel = database.Model;
                //  List<TreeViewData> tree = TreeRef.GetTreeData(selectedId);
                if(datasetModel.Tables.Count > 0){
                    if(datasetModel.Tables[ColumnsToEdit.Name] !=null)
                    {
                        Microsoft.AnalysisServices.Tabular.DataColumn newCol = new Microsoft.AnalysisServices.Tabular.DataColumn();
                        newCol.Name = args.Data.Name;
                        var datatype = DatasetColsDataTypeStrings.Where(x => x.dsDesc == args.Data.dsDesc).FirstOrDefault().dataType;
                        if(datatype == Microsoft.AnalysisServices.Tabular.DataType.Automatic || datatype == Microsoft.AnalysisServices.Tabular.DataType.Unknown)
                            datatype = Microsoft.AnalysisServices.Tabular.DataType.String;
                        newCol.DataType = datatype;
                        datasetModel.Tables[ColumnsToEdit.Name].Columns.Add(newCol);
                        datasetModel.SaveChanges();
                        showAlertMessage(AlertStatus.Success, "Column added successfully!", "Success!");
                        StateHasChanged();   
                        isShowSpinner = false;
                    }
                }
            }catch(Exception ex){
                showAlertMessage(AlertStatus.Danger, ex.Message,"Error!");
                isShowSpinner = false;
            }
        }
        else if (args.Action == "Edit"){

            try{
                isShowSpinner = true;
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();
                DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                Server = dsman.getCustomerServer();
                database = Server.Databases.GetByName(DatasetName);
                datasetModel = database.Model;
                //    List<TreeViewData> tree = TreeRef.GetTreeData(selectedId);
                if (datasetModel.Tables.Count > 0) {
                    if (datasetModel.Tables[ColumnsToEdit.Name] != null) {
                        foreach (var col in datasetModel.Tables[ColumnsToEdit.Name].Columns) 
                        {
                            if (args.Data.Name == col.Name)
                            {
                                var datatype = DatasetColsDataTypeStrings.Where(x => x.dsDesc == args.Data.dsDesc).FirstOrDefault().dataType;
                                if(datatype == Microsoft.AnalysisServices.Tabular.DataType.Automatic || datatype == Microsoft.AnalysisServices.Tabular.DataType.Unknown)
                                    datatype = Microsoft.AnalysisServices.Tabular.DataType.String;
                                col.DataType = datatype != null ? datatype : Microsoft.AnalysisServices.Tabular.DataType.Automatic;
                                datasetModel.SaveChanges();
                                showAlertMessage(AlertStatus.Success, "Dataset updated successfully!", "Success!");
                                StateHasChanged();
                                isShowSpinner = false;
                                break;
                            }
                        }
                    }    }



            }catch(Exception ex){
                showAlertMessage(AlertStatus.Danger, ex.Message,"Error!");
                isShowSpinner = false;
            }

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {

        }
        isShowSpinner = false;
    }
    public async Task AddCustomColumn()
    {
        IsShowAddCustomColumn = true;
        isCheckedAdvanceEditor = false;
        mqueryVal = "=";
        await custColTolTip.CloseAsync();
        ListIntellisense = Intellisense;
    }
    public async Task CloseCustomColoumnEditor(){
        IsShowAddCustomColumn = false;
    }
    public async Task MoveColumnToEditor(TreeViewData treeViewData)
    {
        mqueryVal = mqueryVal +"["+ treeViewData.Name +"]";
        isEnableCustomColumnOKbtn = !string.IsNullOrEmpty(mqueryVal) && !string.IsNullOrEmpty(MQueryColumnName);
    }
    public async Task MoveColumnToEditorToolTip(Script data)
    {
        mqueryVal = mqueryVal +data.Name;
        isEnableCustomColumnOKbtn = !string.IsNullOrEmpty(mqueryVal) && !string.IsNullOrEmpty(MQueryColumnName);
        await custColTolTip.CloseAsync();
    }
    public void CustomCulomnNameOnchange(InputEventArgs args){

        isEnableCustomColumnOKbtn = !string.IsNullOrEmpty(args.Value) && !string.IsNullOrEmpty(mqueryVal);
    }
    void HandleKeyPress(KeyboardEventArgs args)
    {

    }
    void HandleOnMouseOut(FocusOutEventArgs args)
    {
        custColTolTip.CloseAsync().ConfigureAwait(false);
    }
    public void MQueryOnchange(InputEventArgs args)
    {
        ListIntellisense = Intellisense;
        if (args.Value.Split(" ") != null && args.Value.Split(" ").Count() > 1)
        {
            ListIntellisense = ListIntellisense.Where(x => x.Name.ToLower().StartsWith(args.Value.ToLower().Replace("=", "").Split(" ")[args.Value.ToLower().Replace("=", "").Split(" ").Count()-1])).ToList();
        }
        else
        {

            ListIntellisense = ListIntellisense.Where(x => x.Name.ToLower().StartsWith(args.Value.ToLower().Replace("=", ""))).ToList();
        }
        StateHasChanged();
        if (!string.IsNullOrEmpty(args.Value))
            custColTolTip.OpenAsync().ConfigureAwait(false);
        mqueryVal = args.Value.Contains("=")? args.Value :"="+ args.Value;
        isEnableCustomColumnOKbtn = !string.IsNullOrEmpty(args.Value) && !string.IsNullOrEmpty(MQueryColumnName);
        StateHasChanged();
    }
    public async Task savedCustomColumn()
    {
        isShowSpinner = true;
        var expression = ColumnsToEdit.partitionSource.Expression;
        List<string> splittedExp = expression.Split(new [] { '\r', '\n' }).ToList();
        if (splittedExp.Count() > 2)
        {
            splittedExp = splittedExp.Where(x => x != splittedExp[splittedExp.Count() - 1]).ToList();
            splittedExp = splittedExp.Where(x => x != splittedExp[splittedExp.Count() - 1]).ToList();
            var joinedExpression = String.Join("\n", splittedExp);
            var lastEntityName = splittedExp[splittedExp.Count() - 1].Split("=").FirstOrDefault();
            string output = string.Concat(lastEntityName.Where(Char.IsDigit));
            if (!isCheckedAdvanceEditor)
            {
                if (string.IsNullOrEmpty(output) && !lastEntityName.Contains("Added Custom"))
                {
                    string colName = "Added Custom";
                    if (joinedExpression.Trim().EndsWith(","))
                    {
                        joinedExpression = joinedExpression + "\n" + $@"    #""{colName}"" = Table.AddColumn({lastEntityName}, ""{MQueryColumnName}"", each {mqueryVal.Trim().Replace("=", "")})" + "\nin" + "\n" + $@"  #""{colName}""";
                    }
                    else
                    {

                        joinedExpression = joinedExpression + "," + "\n" + $@"    #""{colName}"" = Table.AddColumn({lastEntityName.Trim()}, ""{MQueryColumnName.Trim()}"", each {mqueryVal.Trim().Replace("=", "")})" + "\nin" + "\n     " + $@"  #""{colName}""";

                    }

                }
                else
                {
                    var num = lastEntityName.Contains("Added Custom") && string.IsNullOrEmpty(output) ? 1 : Convert.ToInt32(output) + 1;
                    string colName = "Added Custom" + num;
                    if (joinedExpression.Trim().EndsWith(","))
                    {
                        joinedExpression = joinedExpression + "\n" + $@"    #""{colName}"" = Table.AddColumn({lastEntityName}, ""{MQueryColumnName}"", each {mqueryVal.Trim().Replace("=", "")})" + "\nin" + "\n" + $@"  #""{colName}""";
                    }
                    else
                    {

                        joinedExpression = joinedExpression + "," + "\n" + $@"    #""{colName}"" = Table.AddColumn({lastEntityName}, ""{MQueryColumnName}"", each {mqueryVal.Trim().Replace("=", "")})" + "\nin" + "\n" + $@"  #""{colName}""";

                    }
                }
            }

            try
            {
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();
                DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                Server = dsman.getCustomerServer();
                database = Server.Databases.GetByName(DatasetName);
                datasetModel = database.Model;              
                if(datasetModel.Tables.Count > 0){
                    if(datasetModel.Tables[ColumnsToEdit.Name] !=null){

                        foreach( Microsoft.AnalysisServices.Tabular.Partition  partition  in datasetModel.Tables[ColumnsToEdit.Name].Partitions){
                            var source = (Microsoft.AnalysisServices.Tabular.MPartitionSource)partition.Source;
                            source.Expression = isCheckedAdvanceEditor? mqueryVal: joinedExpression;
                        }
                        database.Update(Microsoft.AnalysisServices.UpdateOptions.ExpandFull);
                        datasetModel.SaveChanges();
                        SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(_configuration.GetConnectionString("XeroConnection"));
                        dsman.PatchSqlDatasourceCredentials(_workspaceId, database.ID, AppSettings.sqlUserName, AppSettings.sqlUserPassword, _profileId, connectionStringBuilder.DataSource.ToString());
                        DatasetManager dsmanager = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                        Server = dsmanager.getCustomerServer();
                        database = Server.Databases.GetByName(DatasetName);
                        datasetModel = database.Model;
                        getDatasetTables(datasetModel.Tables);
                        isShowSpinner = false;
                        MQueryColumnName =string.Empty;
                        mqueryVal = string.Empty;
                        IsShowAddCustomColumn = false;
                        showAlertMessage(AlertStatus.Success, "Custom column added successfully!", "Success!");
                        isCheckedAdvanceEditor = false;
                        StateHasChanged();

                    }
                }
            }catch(Exception ex)
            {
                showAlertMessage(AlertStatus.Danger, ex.Message);
                isShowSpinner = false;
            }

        }  

    }
    private void onChangeAdvanceEditor(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (isCheckedAdvanceEditor)
            mqueryVal = ColumnsToEdit.partitionSource.Expression;
        else
            mqueryVal = "=";
        StateHasChanged();
    }
    #endregion
    #region DatasetRelationship
    private async void ManageRelationship()
    {
        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Warning, "Please select an existing dataset from below", "Warning Message!");
            return;
        }

        AuthenticationResult authenticationResult = null;
        authenticationResult = await DoAuthentication();
        DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
        Server = dsman.getCustomerServer();
        database = Server.Databases.GetByName(Grid.SelectedRecords.FirstOrDefault().Name);
        serverModel = database.Model;
        relationshipList = new List<SingleColumnRelationship>();
        if (serverModel != null)
        {
            cmbFromTable = new List<RelationshipTable>();
            cmbToTable = new List<RelationshipTable>();
            tablewithCols = new List<TableWithColumnList>();
            foreach (var item in serverModel.Tables.Select((value, i) => new { i, value }))
            {
                if (!item.value.Name.ToLower().Trim().Contains("datetabletemplate") && !item.value.Name.ToLower().Trim().Contains("localdatetable"))
                {
                    RelationshipTable tableItem = new RelationshipTable();
                    tableItem.ID = item.i.ToString();
                    tableItem.Text = item.value.Name;

                    cmbFromTable.Add(tableItem);
                    cmbToTable.Add(tableItem);

                    TableWithColumnList tableWithColumnItem = new TableWithColumnList();
                    tableWithColumnItem.cols = new List<TableColumn>();
                    tableWithColumnItem.TableName = item.value.Name;
                    foreach (var cols in item.value.Columns.Select((value, i) => new { i, value }))
                    {
                        TableColumn tableColumn = new TableColumn();
                        tableColumn.ID = cols.i.ToString();
                        tableColumn.Text = cols.value.Name;
                        tableWithColumnItem.cols.Add(tableColumn);
                    }
                    tablewithCols.Add(tableWithColumnItem);
                }
            }
            foreach (Microsoft.AnalysisServices.Tabular.SingleColumnRelationship rel in serverModel.Relationships)
            {
                if (!rel.ToTable.Name.ToLower().Trim().Contains("datetabletemplate") && !rel.ToTable.Name.ToLower().Trim().Contains("localdatetable"))
                {
                    SingleColumnRelationship relItem = new SingleColumnRelationship();
                    relItem.ID = Guid.NewGuid().ToString();
                    relItem.OriginalName = rel.Name;
                    relItem.Name = rel.Name;
                    relItem.FromTable = rel.FromTable.Name;
                    relItem.FromColumn = rel.FromColumn.Name;
                    relItem.ToTable = rel.ToTable.Name;
                    relItem.ToColumn = rel.ToColumn.Name;
                    relationshipList.Add(relItem);
                }
            }



        }
        txtRelationshipName = null;
        cmbFromTableValue = null;
        cmbFromColumnValue = null;
        cmbToTableValue = null;
        cmbToColumnValue = null;
        IsShowManageRelationship = !IsShowManageRelationship;
        //   GridRelationship.Refresh();
        StateHasChanged();


    }
    public async void ActionCompleteRelationship(ActionEventArgs<SingleColumnRelationship> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
        }
        else if (args.Action == "Add")
        {
            serverModel.Relationships.Add(new Microsoft.AnalysisServices.Tabular.SingleColumnRelationship
                {

                    Name = args.Data.Name,
                    ToColumn = serverModel.Tables[args.Data.FromTable.Trim()].Columns[args.Data.FromColumn.Trim()],
                    FromColumn = serverModel.Tables[args.Data.ToTable.Trim()].Columns[args.Data.ToColumn.Trim()]
                });
            try
            {
                database.Update(Microsoft.AnalysisServices.UpdateOptions.ExpandFull);
                serverModel.SaveChanges();
                SingleColumnRelationship relItem = new SingleColumnRelationship();
                relItem.ID = Guid.NewGuid().ToString();
                relItem.Name = txtRelationshipName;
                relItem.FromTable = cmbFromTableValue;
                relItem.FromColumn = cmbFromColumnValue;
                relItem.ToTable = cmbToTableValue;
                relItem.ToColumn = cmbToColumnValue;
                relationshipList.Add(relItem);
                showAlertMessage(AlertStatus.Success, "Relationship " + txtRelationshipName + " has been saved.", "Success!");
                txtRelationshipName = null;
                cmbFromTableValue = null;
                cmbFromColumnValue = null;
                cmbToTableValue = null;
                cmbToColumnValue = null;
            }
            catch (Exception ex)
            {
                showAlertMessage(AlertStatus.Danger, ex.Message, "Error!");
            }
            StateHasChanged();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {

            if (string.IsNullOrEmpty(args.Data.Name)) { showAlertMessage(AlertStatus.Warning, "Relationship Name is required.", "Warning!"); return; }
            if (string.IsNullOrEmpty(args.Data.FromTable)) { showAlertMessage(AlertStatus.Warning, "Please select 'from' table.", "Warning!"); return; }
            if (string.IsNullOrEmpty(args.Data.FromColumn)) { showAlertMessage(AlertStatus.Warning, "Please select 'from' column.", "Warning!"); return; }
            if (string.IsNullOrEmpty(args.Data.ToTable)) { showAlertMessage(AlertStatus.Warning, "Please select 'To' table.", "Warning!"); return; }
            if (string.IsNullOrEmpty(args.Data.ToColumn)) { showAlertMessage(AlertStatus.Warning, "Please select 'To' column.", "Warning!"); return; }
            try
            {

                serverModel.Relationships.Remove(args.Data.OriginalName);
                serverModel.SaveChanges();
                relationshipList.Remove(args.Data);
                serverModel.Relationships.Add(new Microsoft.AnalysisServices.Tabular.SingleColumnRelationship
                    {

                        Name = args.Data.Name,
                        ToColumn = serverModel.Tables[args.Data.FromTable.Trim()].Columns[args.Data.FromColumn.Trim()],
                        FromColumn = serverModel.Tables[args.Data.ToTable.Trim()].Columns[args.Data.ToColumn.Trim()]
                    });


                database.Update(Microsoft.AnalysisServices.UpdateOptions.ExpandFull);
                serverModel.SaveChanges();
                SingleColumnRelationship relItem = new SingleColumnRelationship();
                relItem.ID = Guid.NewGuid().ToString();
                relItem.Name = txtRelationshipName;
                relItem.OriginalName = txtRelationshipName;
                relItem.FromTable = cmbFromTableValue;
                relItem.FromColumn = cmbFromColumnValue;
                relItem.ToTable = cmbToTableValue;
                relItem.ToColumn = cmbToColumnValue;
                relationshipList.Add(relItem);

                showAlertMessage(AlertStatus.Success, "Data has been saved.", "Success!");
            }
            catch (Exception ex) { showAlertMessage(AlertStatus.Danger, ex.Message, "Error!"); }


            StateHasChanged();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {


            serverModel.Relationships.Remove(args.Data.OriginalName);
            database.Update(Microsoft.AnalysisServices.UpdateOptions.ExpandFull);
            serverModel.SaveChanges();
            relationshipList.Remove(args.Data);



        }
    }
    public void ActionBeginHandler(ActionEventArgs<SingleColumnRelationship> args)
    {
        cmbFromColumn = new List<TableColumn>();
        cmbToColumn = new List<TableColumn>();
    }


    #endregion

    #region Report Creation
    public async Task ImportDataset()
    {
        string files = string.Empty;
        try
        {
            foreach (var file in _listFile)
            {

                PowerBIClient _client;
                PowerBIEmbedConfig _result;
                Reports _report;
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();

                var tokenCredentials = new TokenCredentials(authenticationResult.AccessToken, "Bearer");
                // var userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(user.Identity.Name);

                _result = new PowerBIEmbedConfig();
                _client = new PowerBIClient(new Uri("https://api.powerbi.com/"), tokenCredentials);

                var groups = _client.Groups.GetGroups();
                FileStream filestream = new FileStream(file.Name, FileMode.Open, FileAccess.ReadWrite);

                //    file.Stream.CopyTo(stream);
                var filename = file.Name.Split("\\");
                var importName = filename.Count() > 0 ? filename[filename.Count() - 1].ToString().Replace(".pbix", "").Replace("path", "") : filename.ToString().Replace(".pbix", "").Replace("path", "");
                var datasets = await _client.Imports.PostImportWithFileAsync(_workspaceId, filestream, importName.ToString());
                filestream.Close();
                files = files + importName + ", ";


            }
        }
        catch (Exception ex)
        {

            showAlertMessage(AlertStatus.Danger, ex.Message, "Error Message!");

        }

        showAlertMessage(AlertStatus.Success, string.Format("Files/s {0} successfully imported.", files), "Success Message!");

        await RebindData();
        StateHasChanged();
    }
    private void OnBtnClick4()
    {
        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Warning, "Please select an existing dataset from below", "Warning Message!");
            return;
        }
        this.VisibilityNewReportDialog = !this.VisibilityNewReportDialog;
    }
    public async Task GenerateMultipleReports()
    {
        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Success, "Please select an existing dataset from below", "Warning Message!");
            return;
        }

        try
        {

            showSpinner = true;
            foreach (var item in Grid.SelectedRecords)
            {
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();
                DatasetManager manager = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                var path = System.IO.Directory.GetFiles(Directory.GetCurrentDirectory(), "PowerBITemplate.pbix", SearchOption.AllDirectories);
                var import = manager.ImportPBIX(_workspaceId, path.FirstOrDefault().ToString(), reportName, item.Id, datasetDesc, _profileId);


                var customerUserRole = new CustomerUserRole
                    {
                        CustomerTernantId = _customerTenantId,
                        Description = $"View {reportName} Report",
                        UserRoleName = reportName,
                        IsActive = true,
                    };

                string reportRoleCode = await _userSecurityService.InsertCustomerUserRoleByName(customerUserRole);

                string newTitle = await _reportDashboardService.UpsertReportInDashboard(reportName, import.Reports.FirstOrDefault().Id, reportRoleCode);

                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                var message = "Created Report " + reportName;
                var log = new LogModel { Date = DateTime.Now, Module = "Dataset", UserEmail = user.Identity.Name, Message = message };
                await _logService.Log(log);
                showAlertMessage(AlertStatus.Success, "Report: " + reportName + " Successfully created.", "Success Message!");
                reportName = string.Empty;
            }
            showSpinner = false;
            IsSFGridHasSelecion = false;
            this.VisibilityNewReportDialog = !this.VisibilityNewReportDialog;
            await RebindData();
        }
        catch (Exception ex)
        {
            showAlertMessage(AlertStatus.Danger, ex.Message, "Error Message!");
        }

    }

    #endregion

    #region Roles
    private List<string> _rolememberType = new List<string>();
    private List<DatasetRoles> modelRole = new List<DatasetRoles>();
    private DatasetRoles SelectedmodelRole = new DatasetRoles();
    private bool rolesEditMode {get; set;}= false;
    private bool rolesAddMode {get; set;}= false;
    private bool isShowQueryBuilder {get; set;}= false;
    SfGrid<DatasetRoles> sfGridRole;
    SfDialog QueryBuilderDialog;
    SfQueryBuilder<TOMColumns> querybuilder;
    private bool isShowRoles {get;set;}
    private bool enableSavingofRoles {get; set;}= false;
    private bool isShowAddEditRoles {get; set;}= false;
    public List<TableColumns> tablecolumns = new List<TableColumns>();
    private IEnumerable<TOMColumns> selectedTableColumn {get; set;}
    private TableRolePermission selectedTablePermission = new TableRolePermission();

    private List<RuleModel> importRules = new List<RuleModel>()
    {
        //new RuleModel { Field = "", Label = "", Value = "", Operator = "equal", Type = "String" }
    };
    public List<MetadataObjectpermission> metadataPermission = new List<MetadataObjectpermission>(){

      new MetadataObjectpermission{metadataPermission= Microsoft.AnalysisServices.Tabular.MetadataPermission.Default,Description= "Default" },
      new MetadataObjectpermission{metadataPermission= Microsoft.AnalysisServices.Tabular.MetadataPermission.Read, Description= "Read" },
      new MetadataObjectpermission{metadataPermission= Microsoft.AnalysisServices.Tabular.MetadataPermission.None,Description= "None" }
    };
    public List<MetadataModelPermission> metadataModelPermission = new List<MetadataModelPermission>(){
      new MetadataModelPermission{ metadataModelPermission = ModelPermission.None, Description="None"},
      new MetadataModelPermission{ metadataModelPermission = ModelPermission.Read, Description="Read"},
      new MetadataModelPermission{ metadataModelPermission = ModelPermission.ReadRefresh, Description="ReadRefresh"},
      new MetadataModelPermission{ metadataModelPermission = ModelPermission.Refresh, Description="Refresh"},
      new MetadataModelPermission{ metadataModelPermission = ModelPermission.Administrator, Description="Administrator"}
    };
    public List<MetadataRoleMemberType> metadataRoleMemberType = new List<MetadataRoleMemberType>(){
      new MetadataRoleMemberType{ metadataRoleMemberType= RoleMemberType.Auto, Description="Auto"},
      new MetadataRoleMemberType{ metadataRoleMemberType= RoleMemberType.Group, Description="Group"},
      new MetadataRoleMemberType{ metadataRoleMemberType= RoleMemberType.User, Description="User"}
    };

    private async void Roles(){
        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Warning, "Please select an existing dataset from below", "Warning Message!");
            return;
        }
        try
        {
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();
            DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
            Server = dsman.getCustomerServer();
            database = Server.Databases.GetByName(Grid.SelectedRecords.FirstOrDefault().Name);
            serverModel = database.Model;
            DatasetName = Grid.SelectedRecords.FirstOrDefault().Name;
            getDatasetRoleCollection(serverModel);
            serverModel.SaveChanges();
            isShowRoles = true;
            rolesEditMode = false;
            rolesAddMode = false;
            isShowAddEditRoles = false;
            sfGridRole.Refresh();
            SelectedmodelRole = modelRole.Count > 0 ? modelRole.FirstOrDefault() : new DatasetRoles(); ;
            StateHasChanged();
        }
        catch (Exception ex) { showAlertMessage(AlertStatus.Danger, ex.Message); }
    }

    private void getDatasetRoleCollection(Microsoft.AnalysisServices.Tabular.Model model)
    {
        modelRole = new List<DatasetRoles>();
        new DatasetRoles();
        SelectedmodelRole = new DatasetRoles();

        if (model.Roles.Count() > 0)
        {
            foreach (Microsoft.AnalysisServices.Tabular.ModelRole role in model.Roles)
            {
                DatasetRoles datasetRoles = new DatasetRoles();
                datasetRoles.Name = role.Name;
                datasetRoles.OldName = role.Name;
                datasetRoles.Description = role.Description;
                datasetRoles.moderlPermissnDesc = role.ModelPermission.GetDescription();
                datasetRoles.memberRole = role.Members;
                datasetRoles.modelPermission = metadataModelPermission.Where(x => x.metadataModelPermission == role.ModelPermission).FirstOrDefault() == null ? metadataModelPermission.Where(x => x.metadataModelPermission == ModelPermission.None).FirstOrDefault() : metadataModelPermission.Where(x => x.metadataModelPermission == role.ModelPermission).FirstOrDefault();
                datasetRoles.tablePermission = role.TablePermissions;
                datasetRoles.RoleExtendedProperty = role.ExtendedProperties;
                foreach (var tableperm in role.TablePermissions.Where(x=> !x.Name.Contains("DateTableTemplate") && !x.Name.Contains("LocalDateTable")))
                {
                    TableRolePermission newObj = new TableRolePermission();
                    newObj.TableName = tableperm.Name;
                    newObj.filterExpression = tableperm.FilterExpression;
                    newObj.tablePermission = metadataPermission.Where(x => x.metadataPermission == tableperm.MetadataPermission).FirstOrDefault() == null ? metadataPermission.Where(x => x.metadataPermission == MetadataPermission.Default).FirstOrDefault() : metadataPermission.Where(x => x.metadataPermission == tableperm.MetadataPermission).FirstOrDefault();
                    datasetRoles.ListTablePermission.Add(newObj);

                }
                // datasetRoles.ListTablePermission = new List<TableRolePermission>();
                foreach (var item in model.Tables.Where(x=> !x.Name.Contains("DateTableTemplate") && !x.Name.Contains("LocalDateTable")))
                {
                    if (datasetRoles.ListTablePermission.Where(x => x.TableName == item.Name).FirstOrDefault() == null)
                    {
                        TableRolePermission newObj = new TableRolePermission();
                        newObj.TableName = item.Name;
                        newObj.filterExpression = null;
                        newObj.tablePermission = metadataPermission.Where(x => x.metadataPermission == MetadataPermission.Default).FirstOrDefault();
                        datasetRoles.ListTablePermission.Add(newObj);
                    }
                }
                datasetRoles.ListmemberRole = new List<DatasetRoleMembers>();
                foreach (var member in role.Members)
                {
                    DatasetRoleMembers memberitem = new DatasetRoleMembers();
                    memberitem.IdentityProvider = member.Name;
                    memberitem.MemberId = member.MemberID;
                    memberitem.memberName = member.MemberName;
                    memberitem.RoleType = member.Name.Contains("AzureAD") ? "Azure AD Member": "Windows AD Member";
                    if (member.Name.Contains("AzureAD")) {
                        ExternalModelRoleMember membr = (ExternalModelRoleMember)member;
                        memberitem.IsAzureAD = true;
                        memberitem.roleMemberType = metadataRoleMemberType.Where(x => x.metadataRoleMemberType == membr.MemberType).FirstOrDefault();
                    }
                    datasetRoles.ListmemberRole.Add(memberitem);
                }

                modelRole.Add(datasetRoles);

            }
        }else{
            DatasetRoles datasetRoles = new DatasetRoles();
            datasetRoles.ListTablePermission = new List<TableRolePermission>();
            foreach (var item in model.Tables)
            {
                if (datasetRoles.ListTablePermission.Where(x => x.TableName == item.Name).FirstOrDefault() == null)
                {
                    TableRolePermission newObj = new TableRolePermission();
                    newObj.TableName = item.Name;
                    newObj.filterExpression = null;
                    newObj.tablePermission = metadataPermission.Where(x => x.metadataPermission == MetadataPermission.Default).FirstOrDefault();
                    datasetRoles.ListTablePermission.Add(newObj);
                }
            }
            modelRole.Add(datasetRoles);
        }
        tablecolumns = new List<TableColumns>();
        //retrieve Table Columns
        foreach(var item in model.Tables){
            TableColumns col = new TableColumns();
            col.TableName = item.Name;
            foreach(var colItem in item.Columns){
                TOMColumns tomcol = new TOMColumns();
                tomcol.columnName = colItem.Name;
                switch (colItem.DataType)
                {
                    case Microsoft.AnalysisServices.Tabular.DataType.Automatic:
                    case Microsoft.AnalysisServices.Tabular.DataType.String:
                        tomcol.dataType = Syncfusion.Blazor.QueryBuilder.ColumnType.String;
                        break;
                    case Microsoft.AnalysisServices.Tabular.DataType.Int64:
                        tomcol.dataType = Syncfusion.Blazor.QueryBuilder.ColumnType.Number;
                        break;
                    case Microsoft.AnalysisServices.Tabular.DataType.DateTime:
                        tomcol.dataType = Syncfusion.Blazor.QueryBuilder.ColumnType.Date;
                        break;
                    case Microsoft.AnalysisServices.Tabular.DataType.Boolean:
                        tomcol.dataType = Syncfusion.Blazor.QueryBuilder.ColumnType.Boolean;
                        break;
                    default:
                        tomcol.dataType = Syncfusion.Blazor.QueryBuilder.ColumnType.String;
                        break;                   
                }
                col.Lstcolumns.Add(tomcol);
            }
            tablecolumns.Add(col);
        }
    }

    public async void DatasetRoleRowSelectHandler(RowSelectEventArgs<DatasetRoles> args)
    {
        SelectedmodelRole = args.Data;
        StateHasChanged();
    }
    public async void OnActionBegin(ActionEventArgs<DatasetRoles> args)
    {


        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers once cancel operation completes
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();
            DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
            Server = dsman.getCustomerServer();
            database = Server.Databases.GetByName(Grid.SelectedRecords.FirstOrDefault().Name);
            serverModel = database.Model;
            DatasetName = Grid.SelectedRecords.FirstOrDefault().Name;
            serverModel.Roles.Remove(serverModel.Roles.Where(x=> x.Name==SelectedmodelRole.OldName.Trim()).FirstOrDefault());
            serverModel.SaveChanges();
            showAlertMessage(AlertStatus.Success, "Role '" + SelectedmodelRole.Name + "' successfully Deleted.");
            Roles();

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers once save operation completes
            this.Target = "#dialog.e-dialog";
            rolesAddMode = true;
            rolesEditMode = false;
            isShowAddEditRoles = true;
            this.Target = "#dialog.e-dialog";
            SelectedmodelRole.Name = string.Empty;
            SelectedmodelRole.modelPermission  =metadataModelPermission.Where(x=> x.metadataModelPermission == ModelPermission.None).FirstOrDefault();
            SelectedmodelRole.Description = string.Empty;
            foreach(var item in SelectedmodelRole.ListTablePermission){
                item.tablePermission = metadataPermission.Where(x => x.metadataPermission == MetadataPermission.Default).FirstOrDefault();
                item.filterExpression = "";
            }
            SelectedmodelRole.ListmemberRole = new List<DatasetRoleMembers>();
            args.Cancel = true;
            StateHasChanged();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit || args.RequestType == Syncfusion.Blazor.Grids.Action.BeforeBeginEdit )
        {
            // Triggers once delete operation completes
            isShowAddEditRoles = true;
            this.Target = "#dialog.e-dialog";
            rolesEditMode = true;
            rolesAddMode = false;
            args.Cancel = true;
            enableSavingofRoles = true;

        }
    }
    public async Task AddNewMemberRecord()
    {
        if(SelectedmodelRole.ListmemberRole.Count() > 0 && (String.IsNullOrEmpty(SelectedmodelRole.ListmemberRole.LastOrDefault().memberName) && SelectedmodelRole.ListmemberRole.LastOrDefault().IsDeleted == false)){
            return;
        }
        if(SelectedmodelRole.ListmemberRole.Count() > 0 && (!String.IsNullOrEmpty(SelectedmodelRole.ListmemberRole.LastOrDefault().memberName) || SelectedmodelRole.ListmemberRole.LastOrDefault().IsDeleted==true)){
            try{
                DatasetRoleMembers externalModelRoleMember = new DatasetRoleMembers();
                externalModelRoleMember.IdentityProvider = "AzureAD";
                externalModelRoleMember.MemberId = Guid.NewGuid().ToString();
                externalModelRoleMember.IsNewlyAdded = true;
                externalModelRoleMember.IsAzureAD = true;
                externalModelRoleMember.RoleType = "Azure AD Member";
                externalModelRoleMember.roleMemberType=metadataRoleMemberType.Where(x => x.metadataRoleMemberType == RoleMemberType.Auto).FirstOrDefault();
                SelectedmodelRole.ListmemberRole.Add(externalModelRoleMember);
            }catch(Exception ex){
                showAlertMessage(AlertStatus.Danger ,ex.Message);
            }
        }
        else
        {
            SelectedmodelRole.ListmemberRole = new List<DatasetRoleMembers>();
            DatasetRoleMembers externalModelRoleMember = new DatasetRoleMembers();
            externalModelRoleMember.IdentityProvider = "AzureAD";
            externalModelRoleMember.MemberId = Guid.NewGuid().ToString();
            externalModelRoleMember.IsNewlyAdded = true;
            externalModelRoleMember.IsAzureAD = true;
            externalModelRoleMember.RoleType = "Azure AD Member";
            externalModelRoleMember.roleMemberType=metadataRoleMemberType.Where(x => x.metadataRoleMemberType == RoleMemberType.Auto).FirstOrDefault();
            SelectedmodelRole.ListmemberRole.Add(externalModelRoleMember);
        }
    }          
    private async Task SaveRoles(){

        if(String.IsNullOrEmpty(SelectedmodelRole.Name)){ showAlertMessage(AlertStatus.Warning,"Role Name is required"); return;}
        if(SelectedmodelRole.modelPermission == null || SelectedmodelRole.modelPermission == metadataModelPermission.Where(x=> x.metadataModelPermission == ModelPermission.None).FirstOrDefault()){ showAlertMessage(AlertStatus.Warning,"Please set the permission level for your row-level security(RLS) to Read. You cannot use other permission levels for row-level security on this dataset."); return;}
        //Check if the Identity Provider is empty
        foreach(var item in SelectedmodelRole.ListmemberRole.Where(x => x.IsNewlyAdded == true)){
            if (string.IsNullOrEmpty(item.RoleType))
            { 
                showAlertMessage(AlertStatus.Warning,"Identity Provider is required."); return;
                break;

            }
            if (string.IsNullOrEmpty(item.memberName))
            { 
                showAlertMessage(AlertStatus.Warning,"Member Name is required."); return;
                break;

            }
        }
        try{
            if (rolesAddMode)
            {
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();
                DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                Server = dsman.getCustomerServer();
                database = Server.Databases.GetByName(Grid.SelectedRecords.FirstOrDefault().Name);
                serverModel = database.Model;
                DatasetName = Grid.SelectedRecords.FirstOrDefault().Name;
                ModelRole newRoleObj = new ModelRole();
                newRoleObj.Name = SelectedmodelRole.Name;
                newRoleObj.ModelPermission = SelectedmodelRole.modelPermission.metadataModelPermission;
                var tablePermission = SelectedmodelRole.ListTablePermission.Where(x => x.tablePermission.metadataPermission != MetadataPermission.Default || x.tablePermission.metadataPermission != MetadataPermission.None).ToList();
                foreach (var tpItem in tablePermission.Where(x=> x.tablePermission.metadataPermission != MetadataPermission.Default))
                {
                    TablePermission permissionObj = new TablePermission();
                    permissionObj.MetadataPermission = tpItem.tablePermission.metadataPermission;
                    permissionObj.FilterExpression = tpItem.filterExpression;
                    permissionObj.Name = tpItem.TableName;
                    permissionObj.Table = serverModel.Tables[tpItem.TableName.Trim()];
                    newRoleObj.TablePermissions.Add(permissionObj);

                }
                foreach (var memberItem in SelectedmodelRole.ListmemberRole.Where(x => x.IsNewlyAdded == true))
                {
                    if(memberItem.RoleType =="Azure AD Member"){
                        ExternalModelRoleMember memberObj = new ExternalModelRoleMember();
                        memberObj.IdentityProvider = "AzureAD";
                        memberObj.MemberName = memberItem.memberName;
                        memberObj.MemberID = memberItem.memberName;
                        memberObj.MemberType = memberItem.roleMemberType.metadataRoleMemberType;
                        newRoleObj.Members.Add(memberObj);
                    }else{
                        WindowsModelRoleMember memberObj = new WindowsModelRoleMember();
                        memberObj.MemberName = memberItem.memberName;
                        memberObj.MemberID = memberItem.memberName;
                        newRoleObj.Members.Add(memberObj);
                    }
                }
                serverModel.Roles.Add(newRoleObj);
                serverModel.SaveChanges();
                showAlertMessage(AlertStatus.Success, "Role '" + SelectedmodelRole.Name + "' successfully Added.");
                Roles();
                isShowAddEditRoles = false;
            }else
            {
                AuthenticationResult authenticationResult = null;
                authenticationResult = await DoAuthentication();
                DatasetManager dsman = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
                Server = dsman.getCustomerServer();
                database = Server.Databases.GetByName(Grid.SelectedRecords.FirstOrDefault().Name);
                serverModel = database.Model;
                DatasetName = Grid.SelectedRecords.FirstOrDefault().Name;

                var tablePermission = SelectedmodelRole.ListTablePermission.Where(x => x.tablePermission.metadataPermission != MetadataPermission.Default).ToList();
                foreach (var tpItem in tablePermission.Where(x=> x.tablePermission.metadataPermission != MetadataPermission.Default))
                {
                    if (serverModel.Roles[SelectedmodelRole.OldName].TablePermissions.Where(x => x.Name == tpItem.TableName.Trim()).FirstOrDefault() != null)
                    {
                        serverModel.Roles[SelectedmodelRole.OldName].TablePermissions[tpItem.TableName.Trim()].MetadataPermission = tpItem.tablePermission.metadataPermission;
                        serverModel.Roles[SelectedmodelRole.OldName].TablePermissions[tpItem.TableName.Trim()].FilterExpression = tpItem.filterExpression;
                    }
                    else
                    {
                        TablePermission permissionObj = new TablePermission();
                        permissionObj.MetadataPermission = tpItem.tablePermission.metadataPermission;
                        permissionObj.FilterExpression = tpItem.filterExpression;
                        permissionObj.Name = tpItem.TableName.Trim();
                        permissionObj.Table = serverModel.Tables[tpItem.TableName.Trim()];
                        serverModel.Roles[SelectedmodelRole.OldName].TablePermissions.Add(permissionObj);
                    }

                }
                if(SelectedmodelRole.ListmemberRole.Where(x => x.IsDeleted == true).Count() > 0){
                    foreach (var userItem in SelectedmodelRole.ListmemberRole.Where(x => x.IsDeleted == true))
                    {
                        serverModel.Roles[SelectedmodelRole.OldName].Members.Remove(serverModel.Roles[SelectedmodelRole.OldName].Members.Where(x=> x.MemberID==userItem.MemberId).FirstOrDefault());
                    }
                }
                foreach (var memberItem in SelectedmodelRole.ListmemberRole.Where(x => x.IsNewlyAdded == true && x.IsDeleted == false))
                {

                    if (memberItem.RoleType == "Azure AD Member")
                    {
                        ExternalModelRoleMember memberObj = new ExternalModelRoleMember();
                        memberObj.IdentityProvider = "AzureAD";
                        memberObj.MemberName = memberItem.memberName;
                        memberObj.MemberID = memberItem.memberName;
                        memberObj.MemberType = memberItem.roleMemberType.metadataRoleMemberType;
                        serverModel.Roles[SelectedmodelRole.OldName].Members.Add(memberObj);
                    }else{
                        WindowsModelRoleMember memberObj = new WindowsModelRoleMember();
                        memberObj.MemberName = memberItem.memberName;
                        memberObj.MemberID = memberItem.memberName;
                        serverModel.Roles[SelectedmodelRole.OldName].Members.Add(memberObj);
                    }
                }
                serverModel.SaveChanges();
                showAlertMessage(AlertStatus.Success, "Role '" + SelectedmodelRole.Name + "' successfully Updated.");
                Roles();
                isShowAddEditRoles = false;

            }
        }catch(Exception ex){ showAlertMessage(AlertStatus.Danger,ex.Message); }
    }
    public async Task DeleteMember(DatasetRoleMembers memberItem){
        foreach(var item in SelectedmodelRole.ListmemberRole.Where(x=> x.MemberId == memberItem.MemberId || x.memberName == memberItem.memberName)){
            item.IsDeleted = true;
        }
        StateHasChanged();
    }
    public async Task QueryBuilder(TableRolePermission tablePermission){
        var cols = tablecolumns.Where(x => x.TableName == tablePermission.TableName).FirstOrDefault().Lstcolumns.Select(x=>
            new TOMColumns
            {
               columnName= "["+x.columnName+"]",
               dataType = x.dataType,
            }
        ).ToList();
        selectedTablePermission = tablePermission;
        selectedTableColumn = cols.AsEnumerable<TOMColumns>();
        isShowQueryBuilder = true;
        if(querybuilder !=null && selectedTableColumn.Count()>0){
            // querybuilder.Dispose();
            querybuilder.Reset();
            querybuilder.DataSource = selectedTableColumn;
            List<RuleModel> Rules = new List<RuleModel>()
            {
                new RuleModel { Field =selectedTableColumn.FirstOrDefault().columnName, Label = selectedTableColumn.FirstOrDefault().columnName, Value = "", Operator = "equal", Type = "String" }
            };
            querybuilder.SetRules(Rules, "and");
        }
        InvokeAsync(() =>
           {
               StateHasChanged();
           });
    }
    private async Task CancelRoleEdit()
    {
        isShowAddEditRoles = false;
        Roles();
        StateHasChanged();
    }
    private async Task CancelQueryBuilder()
    {
        isShowQueryBuilder = false;
        StateHasChanged();
    }
    private async Task OKQueryBuilder()
    {
        isShowQueryBuilder = false;
        var query =querybuilder.GetSqlFromRules(querybuilder.GetRules());
        if (!string.IsNullOrEmpty(query))
        {
            foreach(var item in SelectedmodelRole.ListTablePermission)
            {
                if (item.TableName == selectedTablePermission.TableName)
                    item.filterExpression = query.ToString();
            }
        }
        StateHasChanged();
    }
    public void OnInputRoleName(InputEventArgs args){
        enableSavingofRoles = !string.IsNullOrEmpty(args.Value.Trim()); 
    }
    private void ValueChangeRoleType(ChangeEventArgs<string, String> args)
    {
        // Here, you can customize your code.
        StateHasChanged();
    }
    #endregion


    public async Task Data(object args)
    {
        var Source = await Grid.GetCurrentViewRecords();
        var IndexNum = 0;
        SelectIndex = new List<double>();
        foreach (var record in Source)
        {
            if (record.IsCheckedList == true)
            {
                SelectIndex.Add(IndexNum);
            }
            IndexNum++;
        }
        await Grid.SelectRows(SelectIndex.ToArray());
    }

    #region Dataset events
    public void Begin(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
    {
        if (VisibilityNewReportDialog)
        {
            ContentReport = "Creating Report..";
        }
        else if (VisibilityUploadReport)
        {
            Content2 = "Importing...";
            CssClassImport = "e-hide-spinner e-info border-radius button-width";
        }
        else
        {
            Content = "Saving...";
            ContentRel = "Saving...";
            CssClass = "e-hide-spinner e-info border-radius";
        }
    }

    public async Task End(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
    {
        if (VisibilityImportDialog || VisibilityUploadReport)
        {
            await ImportDataset();
            Content2 = "Imported";
            CssClassImport = "e-hide-spinner e-success border-radius button-width";
            Content2 = "Import";
            CssClassImport = "e-hide-spinner border-radius button-width";
        }
        else if (VisibilityNewReportDialog)
        {
            await GenerateMultipleReports();
            Content = "Report Created";
            CssClass = "e-hide-spinner e-success border-radius";
            Content = "New Report";
            CssClass = "e-hide-spinner border-radius";
        }
        else if (IsShowManageRelationship)
        {
            if (string.IsNullOrEmpty(txtRelationshipName)) { showAlertMessage(AlertStatus.Warning, "Relationship Name is required.", "Warning!"); return; }
            if (string.IsNullOrEmpty(cmbFromTableValue)) { showAlertMessage(AlertStatus.Warning, "Please select 'from' table.", "Warning!"); return; }
            if (string.IsNullOrEmpty(cmbFromColumnValue)) { showAlertMessage(AlertStatus.Warning, "Please select 'from' column.", "Warning!"); return; }
            if (string.IsNullOrEmpty(cmbToTableValue)) { showAlertMessage(AlertStatus.Warning, "Please select 'To' table.", "Warning!"); return; }
            if (string.IsNullOrEmpty(cmbToColumnValue)) { showAlertMessage(AlertStatus.Warning, "Please select 'To' column.", "Warning!"); return; }
            ContentRel = "Saved..";
            CssClass = "e-hide-spinner e-success border-radius";
            ContentRel = "Save";
            CssClass = "e-hide-spinner border-radius";
            serverModel.Relationships.Add(new Microsoft.AnalysisServices.Tabular.SingleColumnRelationship
                    {

                        Name = txtRelationshipName,
                        ToColumn = serverModel.Tables[cmbToTableValue.Trim()].Columns[cmbToColumnValue.Trim()],
                        FromColumn = serverModel.Tables[cmbFromTableValue.Trim()].Columns[cmbFromColumnValue.Trim()]

                    });
            try
            {
                database.Update(Microsoft.AnalysisServices.UpdateOptions.ExpandFull);
                serverModel.SaveChanges();
                SingleColumnRelationship relItem = new SingleColumnRelationship();
                relItem.ID = Guid.NewGuid().ToString();
                relItem.Name = txtRelationshipName;
                relItem.FromTable = cmbFromTableValue;
                relItem.FromColumn = cmbFromColumnValue;
                relItem.ToTable = cmbToTableValue;
                relItem.ToColumn = cmbToColumnValue;
                relationshipList.Add(relItem);
                showAlertMessage(AlertStatus.Success, "Relationship " + txtRelationshipName + " has been saved.", "Success!");
                txtRelationshipName = null;
                cmbFromTableValue = null;
                cmbFromColumnValue = null;
                cmbToTableValue = null;
                cmbToColumnValue = null;
            }
            catch (Exception ex)
            {
                showAlertMessage(AlertStatus.Danger, ex.Message, "Error!");
            }
            StateHasChanged();
        }
        else if (IsShowAddCustomColumn)
        {
            await  savedCustomColumn();
            ContentRel = "Saved";
            CssClass = "e-hide-spinner e-success border-radius";
            ContentRel = "Save";
            CssClass = "e-hide-spinner border-radius";
        }else if(isShowRoles){

            await SaveRoles();
            ContentRel = "Saved";
            CssClass = "e-hide-spinner e-success border-radius";
            ContentRel = "Save";
            CssClass = "e-hide-spinner border-radius";
        }
        else
        {
            await GenerateDataset();
            Content = "Saved";
            ContentRel = "Saved";
            CssClass = "e-hide-spinner e-success border-radius";
            await Task.Delay(1000);
            Content = "Create Dataset";
            ContentRel = "Save";
            CssClass = "e-hide-spinner border-radius";
        }


    }

    public void OnInput(InputEventArgs args)
    {
        enableButtonDataset = !string.IsNullOrEmpty(args.Value);
        if (string.IsNullOrEmpty(args.Value))
        {
            CssClass = "e-error";
        }
        else
        {
            CssClass = "e-success";
        }
        this.StateHasChanged();
    }
    public void OnInput2(InputEventArgs args)
    {

        if (string.IsNullOrEmpty(args.Value))
        {
            CssClass = "e-error";
        }
        else
        {
            CssClass = "e-success";
            if (VisibilityImportDialog)
            {
                enableButtonImport = !string.IsNullOrEmpty(args.Value);
            }

        }
        this.StateHasChanged();
    }
    public void OnInputReport(InputEventArgs args)
    {
        if (string.IsNullOrEmpty(args.Value))
        {
            CssClass = "e-error";
        }
        else
        {
            CssClass = "e-success";
            enableButtonReport = !string.IsNullOrEmpty(args.Value);
        }
        this.StateHasChanged();
    }
    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }
    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var path = @"path" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            _listFile.Add(filestream);
            filestream.Close();
            file.Stream.Close();
            disableImport = _listFile.Count > 0;
        }
    }
    public void onChangeFunctionCMB(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        isDisableFilter = !isDisableFilter;
    }
    public void onChangeFunctionColumnsCMB(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TableColumn> args)
    {
        if (args.Value != null)
            enableButtonSavePartition = !enableButtonSavePartition;
    }
    public void OnChangeFromTable(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, RelationshipTable> args)
    {
        cmbFromColumn = new List<TableColumn>();
        if (args?.Value != null)
        {
            var cols = tablewithCols.Where(x => x.TableName == args.Value).FirstOrDefault();
            if (cols != null)
                cmbFromColumn.AddRange(cols.cols);
            StateHasChanged();
        }
    }
    public void OnChangeToTable(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, RelationshipTable> args)
    {
        cmbToColumn = new List<TableColumn>();
        if (args?.Value != null)
            cmbToColumn.AddRange(tablewithCols.Where(x => x.TableName == args.Value).FirstOrDefault().cols);

        StateHasChanged();

    }
    public void OnChangeToColumn(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TableColumn> args)
    {
        disableImport = !(string.IsNullOrEmpty(txtRelationshipName) && string.IsNullOrEmpty(cmbFromTableValue) && string.IsNullOrEmpty(cmbFromColumnValue) && string.IsNullOrEmpty(cmbToTableValue) && string.IsNullOrEmpty(cmbToColumnValue));
        StateHasChanged();
    }
    private async void OnValueSelecthandler(SelectEventArgs<DataSetDetail> args)
    {
        //this.Target = "#dialog.e-dialog";
        //isShowWarning = false;
        //isShowSpinner = true;
        //warningMessage = string.Empty;
        //var item = args.Item;
        //AuthenticationResult authenticationResult = null;
        //authenticationResult = await DoAuthentication();
        //DatasetManager manager = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);

        //var tableName = args.ItemData.Name.Split("|");
        //foreach (var datasetItem in _datasetsList)
        //{
        //    if (manager.CheckifColumnExistInTable(datasetItem.Name, tableName[1].ToString()))
        //    {
        //        string comma = string.IsNullOrEmpty(warningMessage) ? "" : ",";
        //        warningMessage = "Selected View is already added to this existing Dataset:" + datasetItem.Name;
        //        isShowWarning = true;
        //        StateHasChanged();
        //        break;
        //    }

        //}

        //isShowSpinner = false;

    }
    public async void RowSelectHandler(RowSelectEventArgs<DataSetDetail> args)
    {
        IsSFGridHasSelecion = Grid.SelectedRecords.Count > 0;
        StateHasChanged();
    }
    public async void RecordClickHandler(RecordClickEventArgs<DataSetDetail> args)
    {
        // Here, you can customize your code.
        IsSFGridHasSelecion = Grid.SelectedRecords.Count > 0;
        StateHasChanged();
    }
    public void CellSelectedHandler(CellSelectEventArgs<DataSetDetail> args)
    {
        // Here, you can customize your code.
    }

    #endregion

    #region Measures Events
    private async void ValueChangedHandler(InputEventArgs args)
    {
        // Here you can customize your code
        sfToolTip.CloseAsync();
        DaxErrorMsg = FormatInvalidExpression(args.Value);
        sfToolTip.Content = DaxErrorMsg;
        sfToolTip.OpenAsync();
        StateHasChanged();
    }
    public async Task OnCreated()
    {
    }
    private async Task ExpressionTextChanged(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        DaxErrorMsg = FormatInvalidExpression(args.Value);
        sfToolTip.Content = DaxErrorMsg;
        sfToolTip.OpenAsync();
        StateHasChanged();
    }
    #endregion
    private async Task Confirm()
    {
        isShowWarning = false;
        if (isDeletion)
        {
            PowerBIClient _client;
            PowerBIEmbedConfig _result;
            Reports _report;
            AuthenticationResult authenticationResult = null;
            authenticationResult = await DoAuthentication();


            var tokenCredentials = new TokenCredentials(authenticationResult.AccessToken, "Bearer");
            // var userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(user.Identity.Name);

            _result = new PowerBIEmbedConfig();
            _client = new PowerBIClient(new Uri("https://api.powerbi.com/"), tokenCredentials);
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                foreach (var item in Grid.SelectedRecords)
                {
                    _client.Datasets.DeleteDataset(_workspaceId, item.Id);

                    var message = "Deleted Dataset with Id:" + item.Id + " and Name: " + item.Name;
                    var log = new LogModel { Date = DateTime.Now, Module = "Dataset", UserEmail = user.Identity.Name, Message = message };
                    await _logService.Log(log);
                }
            }
            catch (Exception ex) { }

            IsSFGridHasSelecion = false;
            showAlertMessage(AlertStatus.Success, "Dataset successfully deleted.", "Success!");
            await RebindData();
            StateHasChanged();
            isDeletion = false;
        }
    }
    private async Task Cancel()
    {
        if (!isDeletion)
        {
            string item = DropVal[DropVal.Count() - 1];
            DropVal = DropVal.Where(x => x != item).ToArray();
            isShowWarning = false;
        }
        StateHasChanged();
    }

    private void onRemove(RemovingEventArgs args)
    {
        foreach (var removeFile in args.FilesData)
        {

            var item = _listFile.Where(x => x.Name == removeFile.Name).First();
            if (item != null)
                _listFile.Remove(item);
            if (File.Exists(Path.Combine(@"rootPath", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"rootPath", removeFile.Name));

            }
        }
    }
    private void DeleteDataset()
    {
        if (Grid.SelectedRecords == null || Grid.SelectedRecords.Count <= 0)
        {
            showAlertMessage(AlertStatus.Warning, "Please select an existing dataset from below", "Warning Message!");
            return;
        }

        warningMessage = "This action will delete the selected dataset and this cannot be undone.";
        isShowWarning = true;
        isDeletion = true;
        StateHasChanged();

    }
    private void SuccessHandler(SuccessEventArgs args)
    {
        disableImport = _listFile.Count > 0;
    }
    public async Task RebindData()
    {
        //   showSpinner = true;
        PowerBIClient _client;
        PowerBIEmbedConfig _result;
        Reports _report;
        AuthenticationResult authenticationResult = null;
        authenticationResult = await DoAuthentication();


        var tokenCredentials = new TokenCredentials(authenticationResult.AccessToken, "Bearer");
        // var userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(user.Identity.Name);

        _result = new PowerBIEmbedConfig();
        _client = new PowerBIClient(new Uri("https://api.powerbi.com/"), tokenCredentials);
        var reports = _client.Reports.GetReports(_workspaceId);
        _reports = reports.Value.ToList();
        var dtaset = _client.Datasets.GetDatasets(_workspaceId);
        _datasetsList.Clear();
        _datasetsList.AddRange(dtaset.Value.Select(x =>
        new DataSetDetail
            {
                Name = x.Name,
                Description = x.Description,
                CreatedDate = x.CreatedDate,
                Id = x.Id,


            }
        ));
        foreach (var item in _datasetsList)
        {
            var refreshHistory = _client.Datasets.GetRefreshHistory(_workspaceId, item.Id).Value.OrderByDescending(x => x.EndTime).FirstOrDefault();
            if (refreshHistory != null)
            {
                item.RefreshDate = refreshHistory.EndTime;
            }
        }

        _datasetsList = _datasetsList.ToList().OrderByDescending(x => x.CreatedDate).ToList();

        showSpinner = false;
        StateHasChanged();

    }

    //Generate Dataset
    public async Task GenerateDataset()
    {
        AuthenticationResult authenticationResult = null;
        if (DropVal.Count() <= 0)
        {

            showAlertMessage(AlertStatus.Warning, string.Format("Please choose a dataset"), "Message Warning!");
            return;

        }
        try
        {

            authenticationResult = await DoAuthentication();
            DatasetManager manager = new DatasetManager(false, userNameGroupRolesModel.WorkspaceUrl, authenticationResult);
            var server = DatasetManager.CreateDatabase(datasetName, datasetDesc);

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var message = "Created Dataset with Id: " + server.ID + " and Name: " + server.Name;
            var log = new LogModel { Date = DateTime.Now, Module = "Dataset", UserEmail = user.Identity.Name, Message = message };
            await _logService.Log(log);

            Microsoft.AnalysisServices.Tabular.Model model = server.Model;

            foreach (var item in DropVal)
            {
                var views = LstSQLViews.Where(x => x.Name == item).FirstOrDefault();
                if (views != null)
                {
                    string[] tableName = views.Name.Split("|");
                    CreateDynamicTable(model, tableName[1].Trim(), views.columns);
                }
            }


            Console.WriteLine(" Saving new database model using TOM");
            model.SaveChanges();

            Console.WriteLine(" Patching datasource credentials using Power BI REST API");


            // Use REST API to patch datasource credentals
            //  var workspace = DatasetManager.GetWorkspace(server.Name);
            var dataset = manager.GetDataset(_workspaceId, server.Name, _profileId);
            SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(_configuration.GetConnectionString("XeroConnection"));
            manager.PatchSqlDatasourceCredentials(_workspaceId, dataset.Id, AppSettings.sqlUserName, AppSettings.sqlUserPassword, _profileId, connectionStringBuilder.DataSource.ToString());

            Console.WriteLine(" Refreshing dataset using TOM");

            model.RequestRefresh(Microsoft.AnalysisServices.Tabular.RefreshType.Full);
            model.SaveChanges();

            PowerBIClient _client;
            PowerBIEmbedConfig _result;
            Reports _report;

            var tokenCredentials = new TokenCredentials(authenticationResult.AccessToken, "Bearer");
            // var userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(user.Identity.Name);

            _result = new PowerBIEmbedConfig();
            _client = new PowerBIClient(new Uri("https://api.powerbi.com/"), tokenCredentials);
            _client.Datasets.TakeOver(_workspaceId, dataset.Id);
            Console.WriteLine(" Data model provisioning has completed");
            Console.WriteLine();
            if (isChecked)
            {
                var path = System.IO.Directory.GetFiles(Directory.GetCurrentDirectory(), "PowerBITemplate.pbix", SearchOption.AllDirectories);
                var import = manager.ImportPBIX(_workspaceId, path.FirstOrDefault().ToString(), datasetName, dataset.Id, datasetDesc, _profileId);

                var customerUserRole = new CustomerUserRole
                    {
                        CustomerTernantId = _customerTenantId,
                        Description = $"View {datasetName} Report",
                        UserRoleName = datasetName,
                        IsActive = true,
                    };

                string reportRoleCode = await _userSecurityService.InsertCustomerUserRoleByName(customerUserRole);

                string newTitle = await _reportDashboardService.UpsertReportInDashboard(datasetName, import.Reports.FirstOrDefault().Id, reportRoleCode);

            }
            showAlertMessage(AlertStatus.Success, string.Format("Dataset: '{0}' successfully created. ", datasetName), "Success Message!");
            this.VisibilityDatasetDialog = !this.VisibilityDatasetDialog;
            await RebindData();
            this.datasetName = null;
            this.datasetDesc = null;
            this.DropVal.ToList().Clear();
            StateHasChanged();


        }
        catch (Exception ex)
        {
            showAlertMessage(AlertStatus.Danger, ex.Message, "Error on Saving!");
            DatasetManager.Disconnect();
        }
    }
    #region Tabular Object Model TOM
    public Microsoft.AnalysisServices.Tabular.Model CreateDynamicTable(Microsoft.AnalysisServices.Tabular.Model model, string tableName, List<ColumnEntry> columns)
    {
        SqlConnectionStringBuilder connectionStringBuilder = new SqlConnectionStringBuilder(_configuration.GetConnectionString("XeroConnection"));

        string queryTemplate = Properties.Resources.Generic;
        queryTemplate = queryTemplate.Replace("@customerName", CustomerName.Trim());
        queryTemplate = queryTemplate.Replace("@viewName", tableName.Trim());
        queryTemplate = queryTemplate.Replace("@serverName", connectionStringBuilder.DataSource.Trim());
        Microsoft.AnalysisServices.Tabular.Table dynamicTable = new Microsoft.AnalysisServices.Tabular.Table()
            {

                Name = tableName,
                Description = datasetDesc,
                Partitions = {
            new Microsoft.AnalysisServices.Tabular.Partition()
            {

            Name = tableName,
            Mode = Microsoft.AnalysisServices.Tabular.ModeType.Import,
            Source = new Microsoft.AnalysisServices.Tabular.MPartitionSource()
            {

            Expression = queryTemplate
            }
            }
            }
            };
        Microsoft.AnalysisServices.Tabular.Partition partition = dynamicTable.Partitions[0];


        foreach (var col in columns)
        {
            Microsoft.AnalysisServices.Tabular.DataColumn dataCol = new Microsoft.AnalysisServices.Tabular.DataColumn();
            dataCol.Name = col.columnName;

            dataCol.DataType = col.DataType.Trim().Contains("char")
            ? Microsoft.AnalysisServices.Tabular.DataType.String
            : col.DataType.Trim().Contains("time")
            ? Microsoft.AnalysisServices.Tabular.DataType.DateTime
            : col.DataType.Trim().Contains("bit")
            ? Microsoft.AnalysisServices.Tabular.DataType.Boolean
            : col.DataType.Trim().Contains("float")
            ? Microsoft.AnalysisServices.Tabular.DataType.Double
            : col.DataType.Trim().Contains("int")
            ? Microsoft.AnalysisServices.Tabular.DataType.Int64
            : Microsoft.AnalysisServices.Tabular.DataType.String;
            dataCol.SourceColumn = col.columnName;
            dynamicTable.Columns.Add(dataCol);
        }


        model.Tables.Add(dynamicTable);


        return model;
    }
    #endregion
    private const string AuthorityFormat = "https://login.microsoftonline.com/94e6b5f2-d1da-4de9-a4ca-88cfdb6c3de0/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";
    private void getDatabases()
    {
        List<string> listViews = new List<string>();
        string conString = _configuration.GetConnectionString("XeroConnection").Replace("databaseName", "master");
        string query = @"SELECT name, database_id, create_date
    FROM sys.databases";

        sqlDatabases = CreateCommand(query, conString, true);

        if (sqlDatabases.Count() > 0)
        {
            CustomerName = CustomerName.ToLower().Replace("daaas", "").Replace("-", "");
            sqlDatabases = sqlDatabases.Where(x => x.ToString().ToLower().Contains(CustomerName.ToLower().Trim())).ToList();
            foreach (var item in sqlDatabases)
            {
                string queryString = @"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS";
                string con = _configuration.GetConnectionString("XeroConnection").Replace("databaseName", item.ToString());
                if (!item.ToString().ToLower().ToString().Contains("master"))
                    listViews = CreateCommand(queryString, con, false, item);

                foreach (var view in listViews)
                {
                    DataSetDetail detail = new DataSetDetail();
                    detail.Name = item + "| " + view.ToString();
                    detail.columns = new List<ColumnEntry>();
                    string queryCols = string.Format("SELECT COLUMN_NAME, DATA_TYPE FROM  information_schema.columns WHERE table_name = '{0}'", view);
                    detail.columns = CreateCommandColumnDetails(queryCols, con, false, item);
                    LstSQLViews.Add(detail);
                }
            }

        }

    }
    private List<string> CreateCommand(string queryString,
    string connectionString, bool isSQLDatabase, string databaseName = null)
    {
        List<string> data = new List<string>();
        using (SqlConnection connection = new SqlConnection(
        connectionString))
        {
            SqlCommand command = new SqlCommand(queryString, connection);
            command.Connection.Open();
            command.ExecuteNonQuery();
            SqlDataReader reader = command.ExecuteReader();

            //    // Call Read before accessing data.
            while (reader.Read())
            {
                var record = reader[0];
                data.Add(record.ToString());


            }
            command.Connection.Close();
            reader.Close();
        }

        return data;

    }
    private List<ColumnEntry> CreateCommandColumnDetails(string queryString,
    string connectionString, bool isSQLDatabase, string databaseName = null)
    {
        List<ColumnEntry> data = new List<ColumnEntry>();
        using (SqlConnection connection = new SqlConnection(
        connectionString))
        {
            SqlCommand command = new SqlCommand(queryString, connection);
            command.Connection.Open();
            command.ExecuteNonQuery();
            SqlDataReader reader = command.ExecuteReader();

            //    // Call Read before accessing data.
            while (reader.Read())
            {
                ColumnEntry entry = new ColumnEntry();
                var record = reader[0];
                entry.columnName = record.ToString();
                entry.DataType = reader[1].ToString();
                data.Add(entry);


            }
            command.Connection.Close();
            reader.Close();
        }

        return data;

    }



    private async Task<Microsoft.Identity.Client.AuthenticationResult> DoAuthentication()
    {
        IConfidentialClientApplication daemonClient;
        daemonClient = ConfidentialClientApplicationBuilder.Create(_configuration.GetSection("AzureAd:ClientId").Value)
        .WithAuthority(string.Format(AuthorityFormat, _configuration.GetSection("AzureAd:TenantId").Value))
        .WithClientSecret(_configuration.GetSection("AzureAd:ClientSecret").Value)
        .Build();

        AuthenticationResult authResult = await daemonClient.AcquireTokenForClient(new[] { MSGraphScope }).ExecuteAsync();
        return authResult;
    }
    private List<DataTable> CloneTable(DataTable tableToClone, int countLimit)//Split function
    {
        List<DataTable> tables = new List<DataTable>();
        int count = 0;
        DataTable copyTable = null;
        foreach (DataRow dr in tableToClone.Rows)
        {
            if ((count++ % countLimit) == 0)
            {
                copyTable = new DataTable();
                copyTable = tableToClone.Clone();
                copyTable.TableName = "Sample" + count;
                tables.Add(copyTable);
            }
            copyTable.ImportRow(dr);
        }
        return tables;
    }
    private void showAlertMessage(string alertType, string message, string title=null)
    {

        MessageDialog.OpenDialog(alertType, message);

    }
    public static void ImportPBIX(string pbixFilePath, string importName, string AccessToken)
    {
        // delete exisitng import of the same name if on exists
        DeleteImport(importName, AccessToken);
        // create REST URL with import name in quer string
        string restUrlImportPbix = ProgramConstants.PowerBiServiceRootUrl + "imports?datasetDisplayName=" + importName;
        // load PBIX file into StreamContent object
        var pbixBodyContent = new StreamContent(File.Open(pbixFilePath, FileMode.Open));
        // add headers for request bod content
        pbixBodyContent.Headers.Add("Content-Type", "application/octet-stream");
        pbixBodyContent.Headers.Add("Content-Disposition",
        @"form-data; name=""file""; filename=""" + pbixFilePath + @"""");
        // load PBIX content into body using multi-part form data
        MultipartFormDataContent requestBody = new MultipartFormDataContent(Guid.NewGuid().ToString());
        requestBody.Add(pbixBodyContent);
        // create and configure HttpClient
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Accept", "application/json");
        client.DefaultRequestHeaders.Add("Authorization", "Bearer " + AccessToken);
        // post request
        var response = client.PostAsync(restUrlImportPbix, requestBody).Result;
        // check for success
        if (response.StatusCode.ToString().Equals("Accepted"))
        {
            Console.WriteLine("Import process complete: " + response.Content.ReadAsStringAsync().Result);
        }
    }
    public static void DeleteImport(string importName, string AccessToken)
    {
        // check to see if import already exists by inspecting dataset names
        string restUrlDatasets = ProgramConstants.PowerBiServiceRootUrl + "datasets/";
        string jsonDatasets = ExecuteGetRequest(restUrlDatasets, AccessToken);
        DatasetCollection datasets = JsonConvert.DeserializeObject<DatasetCollection>(jsonDatasets);
        foreach (var dataset in datasets.value)
        {
            if (importName.Equals(dataset.Name))
            {
                // if dataset name matches, delete dataset which will effective delete the entire import
                Console.WriteLine("Deleting existing import named " + dataset.Name);
                string restUrlDatasetToDelete = ProgramConstants.PowerBiServiceRootUrl + "datasets/" + dataset.Id;
                ExecuteDeleteRequest(restUrlDatasetToDelete, AccessToken);
            }
        }
    }
    private static string ExecuteDeleteRequest(string restUri, string AccessToken)
    {
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Accept", "application/json");
        client.DefaultRequestHeaders.Add("Authorization", "Bearer " + AccessToken);
        HttpResponseMessage response = client.DeleteAsync(restUri).Result;

        if (response.IsSuccessStatusCode)
        {
            return response.Content.ReadAsStringAsync().Result;
        }
        else
        {
            Console.WriteLine();
            Console.WriteLine("OUCH! - error occurred during Delete REST call");
            Console.WriteLine();
            return string.Empty;
        }
    }
    private static string ExecuteGetRequest(string restUri, string AccessToken)
    {

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", "Bearer " + AccessToken);
        client.DefaultRequestHeaders.Add("Accept", "application/json");

        HttpResponseMessage response = client.GetAsync(restUri).Result;

        if (response.IsSuccessStatusCode)
        {
            return response.Content.ReadAsStringAsync().Result;
        }
        else
        {
            Console.WriteLine();
            Console.WriteLine("OUCH! - error occurred during GET REST call");
            Console.WriteLine();
            return string.Empty;
        }
    }
    private string FormatInvalidExpression(string Expression)
    {
        string errors = string.Empty;
        var formatter = new DaxFormatterClient();

        var response = formatter.FormatAsync(Expression).Result;

        Console.WriteLine($"Formatted '{response.Formatted}' ");

        foreach (var error in response.Errors)
        {
            if (error != null)
            {
                errors = string.Format("Line {0}, Column {1}, Message {2}", error.Line, error.Column, error.Message);
            }
        }

        return errors;
    }
    public class PraqData
    {
        public List<ParquetData> Data { get; set; }
        public string TableName { get; set; }
    }


    public class ProgramConstants
    {


        // Redirect URL needs to match reply URL in Azure registration
        public const string RedirectUri = "https://localhost/PbixInstallerForPowerBI";

        // URLs for working with the Power BI REST API
        public const string AzureAuthorizationEndpoint = "https://login.microsoftonline.com/common";
        public const string PowerBiServiceResourceUri = "https://analysis.windows.net/powerbi/api";
        public const string PowerBiServiceRootUrl = "https://api.powerbi.com/v1.0/myorg/";

        // Commonly-used Power BI REST URLs
        public const string restUrlWorkspaces = "https://api.powerbi.com/v1.0/myorg/groups/";
        public const string restUrlDatasets = "https://api.powerbi.com/v1.0/myorg/datasets/";
        public const string restUrlReports = "https://api.powerbi.com/v1.0/myorg/reports/";
        public const string restUrlImports = "https://api.powerbi.com/v1.0/myorg/imports/";



    }
    public class DatasetRoles{
        public MetadataModelPermission modelPermission{get; set;}
        public string moderlPermissnDesc{get; set;}
        public TablePermissionCollection tablePermission{get; set;}
        public ModelRoleMemberCollection memberRole{get; set;}

        public string ID{get; set;}
        public string Name{get; set;}
        public string OldName{get; set;}
        public string Description{get;set;}
        public ModelRoleExtendedPropertyCollection RoleExtendedProperty{get;set;}
        public List<TableRolePermission> ListTablePermission = new List<TableRolePermission>();
        public  List<DatasetRoleMembers> ListmemberRole = new List<DatasetRoleMembers>();      

    }
    public class TableRolePermission{
        public string TableName{ get; set; }
        public string filterExpression{ get; set; }
        public bool IsNewlyAdded{ get; set; }=false;
        public MetadataObjectpermission tablePermission { get; set; }
    }
    public class DatasetRoleMembers{

        public string memberName{ get; set; }
        public string MemberId{ get; set; }
        public string RoleType{ get; set; }
        public string  IdentityProvider{ get; set; }
        public MetadataRoleMemberType roleMemberType { get; set; }
        public bool IsNewlyAdded { get; set; } = false;
        public bool IsDeleted { get; set; } = false;
        public bool IsAzureAD { get; set; } = false;
    }
    public class DatasetCollection
    {
        public List<Dataset> value { get; set; }
    }
    public class Measure
    {
        public string Name { get; set; }
        public string OriginalName { get; set; }

        public string Description { get; set; }

        public Microsoft.AnalysisServices.Tabular.DataType DataType { get; set; }

        public string Expression { get; set; }

        public string FormatString { get; set; }

        public bool IsHidden { get; set; }

        public DateTime ModifiedTime { get; set; }

        public DateTime StructureModifiedTime;
        public string SourceTable { get; set; }
        public string TableValue { get; set; }
        public string ColumnValue { get; set; }
        public string FunctionValue { get; set; }


    }
    public class MetadataObjectpermission{
        public MetadataPermission metadataPermission{get;set;}
        public string Description {get;set;}
    }
    public class MetadataModelPermission{
        public ModelPermission metadataModelPermission{get;set;}
        public string Description {get;set;}
    }
    public class MetadataRoleMemberType{
        public RoleMemberType metadataRoleMemberType{get;set;}
        public string Description {get;set;}
    }
    public class TableColumns
    {
        public string TableName { get; set; }
        public List<TOMColumns> Lstcolumns = new List<TOMColumns>();
    }
    public class TOMColumns{
        public string columnName{ get; set; }  
        public Syncfusion.Blazor.QueryBuilder.ColumnType dataType{ get; set; }  
    }
    	public enum DataType {    
        Automatic = 1,
        String = 2,
        Int64 = 6,
        Double = 8,
        DateTime = 9,
        Decimal = 10,
        Boolean = 11,
        Binary = 17,
        Unknown = 19,
        Variant = 20,
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogService _logService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAppOwnsDataMultiTenantDbService _iAppOwnsDataMultiTenantDbService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDatasetGovernanceService _datasetGovernanceService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IReportDashboardService _reportDashboardService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserSecurityService _userSecurityService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration _configuration { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlobStorageService _blobStorageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazoradeMsalService msalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager UriHelper { get; set; }
    }
}
#pragma warning restore 1591
