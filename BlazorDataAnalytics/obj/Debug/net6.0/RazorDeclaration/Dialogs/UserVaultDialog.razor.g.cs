// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorDataAnalytics.Dialogs
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor.RichTextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\_Imports.razor"
using BlazorDataAnalytics.Dialogs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Azure.Security.KeyVault.Secrets;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services.UserVaultService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services.KeyVaultManager;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services.LogService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Microsoft.Azure.KeyVault;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Microsoft.Azure.KeyVault.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Microsoft.IdentityModel.Clients.ActiveDirectory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using SecretProperties = Azure.Security.KeyVault.Secrets.SecretProperties;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services.UserSecurityService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using System.Net.Http.Headers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Xero.NetStandard.OAuth2.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Xero.NetStandard.OAuth2.Config;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Xero.NetStandard.OAuth2.Token;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Xero.NetStandard.OAuth2.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Cards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services.BlobStorageService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Microsoft.WindowsAzure.Storage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Microsoft.WindowsAzure.Storage.Blob;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 38 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.TreeGrid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using BlazorDataAnalytics.Services.SalesForceService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Persistence.Config.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 41 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 42 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using RestSharp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
using System.Dynamic;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/user-vault-dialog")]
    public partial class UserVaultDialog : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 801 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
       
    private RenderFragment Refresh =>
        

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.AddMarkupContent(0, "<SfButton style=\"height: 35px;\" @onclick=\"async (e) => await RetrieveTables()\">Refresh table</SfButton>");
        }
#nullable restore
#line 803 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
                                                                                                                 ;

    bool IsVisiblePreview = false;
    SfUploader UploadObj; 
    private EditContext mycontext;

    [Parameter]
    public int? id { get; set; } = 0;

    [Parameter]
    public Guid? systemId { get; set; }

    [Parameter]
    public string userName { get; set; }

    [Parameter]
    public string description { get; set; }

    [Parameter]
    public byte systemNameId { get; set; }

    [Parameter]
    public byte connectorTypeId { get; set; }

    [Parameter]
    public int customerTenantID { get; set; }

    [Parameter]
    public bool refreshParent { get; set; } = false;

    [Parameter]
    public EventCallback<bool> RefreshPageEventCallBack { get; set; }

    public bool IsVisible { get; set; } = false;
    public bool HeaderRow { get; set; }

    public InputType PassTxtType = InputType.Password;
    public InputType TokenTxtType = InputType.Password;
    public InputType ClientIdType = InputType.Password;
    public InputType ClientSecretType = InputType.Password;

    private bool showSpinner { get; set; }

    private UserVaultModel userVaultModel { get; set; } = new UserVaultModel();

    public class CommonEnumModelExtended { }

    List<CommonEnumModel> SystemData = new List<CommonEnumModel>();


    List<CommonEnumModel> ConnectorTypeData = Enum.GetValues(typeof(EnumSystem))
                    .Cast<EnumConnectorType>()
                    .Select(v => new CommonEnumModel { Id = (byte)v, Name = v.GetDescription() })
                    .ToList();

    public List<Tenant> ListOfXeroxSelectedTenants;
    public Guid? selectedTenant;

    SfTab Tab;
    public int SelectedTab = 0;
    public bool isAdd = false;

    SfDropDownList<string, ReuccurenceDesc> ddlObj { get; set; }

    public class ReuccurenceDesc
    {
        public string Name { get; set; }
    }

    List<ReuccurenceDesc> ReuccurenceDescList = new List<ReuccurenceDesc>
    {
        new ReuccurenceDesc() { Name = "Minute(s)"},
        new ReuccurenceDesc() { Name = "Hour(s)"},
        new ReuccurenceDesc() { Name = "Day(s)" },
        new ReuccurenceDesc() { Name = "Week(s)"},
        new ReuccurenceDesc() { Name = "Month(s)"}
    };

    List<ReuccurenceDesc> ReuccurenceDescFiltered = new List<ReuccurenceDesc>
    {
        new ReuccurenceDesc() { Name = "Minute(s)"},
        new ReuccurenceDesc() { Name = "Hour(s)"},
        new ReuccurenceDesc() { Name = "Day(s)" },
        new ReuccurenceDesc() { Name = "Week(s)"},
        new ReuccurenceDesc() { Name = "Month(s)"}
    };

    private UserNameGroupRolesModel userNameGroupRolesModel = new UserNameGroupRolesModel();
    private string userNameIdentity { get; set; }
    private string CustomerName { get; set; }
    bool verify = false;
    public bool isFiltered = false;
    string salesForceInstanceUrl = "";
    public List<UserVaultSalesForceTable> selectedTables { get; set; }
    public List<Record> SalesForceTableList { get; set; }
    public List<Record> SalesForceColumnList { get; set; }
    private List<string> sqlDatabases = new List<string>();
    private string dbName = "";  
    private List<IBrowserFile> loadedFiles = new();
    private readonly string defaultDirectory = "default";

    public class Attributes
    {
        public string type { get; set; }
        public string url { get; set; }
    }

    public class Record
    {
        public bool IsSelected  { get; set; }
        public Attributes attributes { get; set; }
        public string QualifiedApiName { get; set; }
        public string ParentName { get; set; }
    }

    public class SalesForceTable
    {
        public int totalSize { get; set; }
        public bool done { get; set; }
        public List<Record> records { get; set; }
    }

    public class SalesForceColumn
    {
        public int totalSize { get; set; }
        public bool done { get; set; }
        public List<Record> records { get; set; }
    }

    public class SalesForceToken
    {
        public string access_token { get; set; }
        public string instance_url { get; set; }
        public string id { get; set; }
        public string token_type { get; set; }
        public string issued_at { get; set; }
        public string signature { get; set; }
    }
    public bool IsVisibleEditTable = false;

    public async Task TabCreate()
    {
        await Tab.EnableTabAsync(1, true);
        await Tab.EnableTabAsync(2, true);
        await Tab.EnableTabAsync(3, true);
    }

    private async Task Next()
    {
        this.SelectedTab++;
        if(this.SelectedTab == 1)
        {
            if (userVaultModel.System != null && userVaultModel.System == EnumSystem.Xero)
            {
                userVaultModel.UserVaultAppDetail.ClientId = _config.GetSection("Xero:ClientId").Value;
                userVaultModel.UserVaultAppDetail.ClientSecret = _config.GetSection("Xero:ClientSecret").Value;

            }else if(userVaultModel.System != null && userVaultModel.System == EnumSystem.SalesForce)
            {
                if(!isAdd)
                {
                     SalesForceTableList = await GetTables(); 
                }
            }
        }
    }

    public async Task initXero(int userVaultId, string cllientId, string emailAddress, string payload)
    {
        if (userVaultId == null || userVaultId == 0)
            return;

        string baseUrl = new Uri(NavigationManager.BaseUri).ToString();
        string callbackUri = baseUrl + "/api/AuthorizeApp/XeroCallback";
        var userVaultAppDetails = await _userVaultService.GetUserVaultAppDetails(userVaultId);


        XeroConfiguration xconfig = new XeroConfiguration
            {
                ClientId = _config.GetSection("Xero:ClientId").Value,
                ClientSecret = _config.GetSection("Xero:ClientSecret").Value,
                CallbackUri = new Uri(callbackUri),
                Scope = "offline_access accounting.transactions openid profile email accounting.contacts accounting.settings files",
                State = userVaultId.ToString()
            };

        var client = new XeroClient(xconfig);

        var xeroToken = System.Text.Json.JsonSerializer.Deserialize<XeroOAuth2Token>(payload);

        var utcTimeNow = DateTime.UtcNow;
        if (utcTimeNow > xeroToken.ExpiresAtUtc)
        {
            var clientExpiry = new XeroClient(xconfig);
            xeroToken = (XeroOAuth2Token)await clientExpiry.RefreshAccessTokenAsync(xeroToken);
            payload = System.Text.Json.JsonSerializer.Serialize(xeroToken);
            xeroToken = System.Text.Json.JsonSerializer.Deserialize<XeroOAuth2Token>(payload);
        }

        var userVaultAppDetail = new UserVaultAppDetailModel
            {
                UserVaultId = userVaultId,
                ClientId = _config.GetSection("Xero:ClientId").Value,
                ClientSecret = _config.GetSection("Xero:ClientSecret").Value,
                AccessToken = xeroToken.AccessToken,
                RefreshToken = xeroToken.RefreshToken,
                DateTokenExpiredUtc = xeroToken.ExpiresAtUtc,
                IdToken = xeroToken.IdToken,
                PayLoadData = payload
            };

        ListOfXeroxSelectedTenants = await client.GetConnectionsAsync(xeroToken);
        await _userVaultService.UpdateUserAppDetailTokenAsync(userVaultAppDetail);
        if (ListOfXeroxSelectedTenants.Count > 0)
            verify = false;
    }


    public async Task OpenDialog(UserVaultModel userVaultModel)
    {
        this.IsVisible = true;
        this.refreshParent = false;
        id = 0;
        if (userVaultModel != null)
        {
            id = userVaultModel.Id;
            systemNameId = (byte)userVaultModel.System;
            description = userVaultModel.Description;
            customerTenantID = userVaultModel.CustomerTenantID ?? 0;
            connectorTypeId = userVaultModel.ConnectorTypeId ?? 0;
        }
        await this.OnInitializedAsync();
        this.StateHasChanged();
    }

    public void CloseDialog()
    {
        this.IsVisible = false;
        this.StateHasChanged();
    }

    private void OnSubmitHandler()
    {
        RefreshPageEventCallBack.InvokeAsync(this.refreshParent);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SelectedTab = 0;
            showSpinner = false;
            SystemData = _userVaultService.GetSystems();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(user.Identity.Name);
            customerTenantID = userNameGroupRolesModel.CustomerTenantId;
            userNameIdentity = user?.Identity?.Name;
            userNameGroupRolesModel = await _userSecurityService.GetUserNameGroupRoles(userNameIdentity);

            if (userNameGroupRolesModel.WorkspaceId == Guid.Empty)
            {
                showSpinner = false;
                return;
            }

            CustomerName = userNameGroupRolesModel.CustomerName;

            if (id > 0)
            {
                showSpinner = true;
                isAdd = false;
                KeyVaultSecret keyVaultSecretValue;
                keyVaultSecretValue = await _keyVaultManager.GetSecret(id.ToString());
                userVaultModel = new UserVaultModel
                    {
                        Id = id,
                        ConnectionString = keyVaultSecretValue != null ? keyVaultSecretValue.Value : string.Empty,
                        Description = description,
                        SystemNameId = systemNameId,
                        System = (EnumSystem)systemNameId,
                        ConnectorTypeId = connectorTypeId,
                        CustomerTenantID = customerTenantID,
                    };

                userVaultModel.UserVaultAppDetail = await _userVaultService.GetUserVaultAppDetails(id);
            }
            else
            {
                isAdd = true;
                userVaultModel.UserVaultAppDetail.IsStoreInQTX = true;
                userVaultModel.UserVaultAppDetail.UserName = string.Empty;
                userVaultModel.UserVaultAppDetail.UserPassword = string.Empty;
                userVaultModel.UserVaultAppDetail.ClientId = string.Empty;
                userVaultModel.UserVaultAppDetail.ClientSecret = string.Empty;
                userVaultModel.UserVaultAppDetail.SecurityToken = string.Empty;
                userVaultModel.UserVaultAppDetail.APIVersion = string.Empty;
                userVaultModel.UserVaultAppDetail = new UserVaultAppDetailModel();
                SalesForceTableList = new List<Record>();
            }


            showSpinner = false;

            if (userVaultModel.SystemNameId != null || userVaultModel.SystemNameId <= 0)
            {
                userVaultModel.UserVaultAppDetail = await _userVaultService.GetUserVaultAppDetails(userVaultModel.UserVaultAppDetail.UserVaultId);
                await initXero((int)userVaultModel.UserVaultAppDetail.UserVaultId, userVaultModel.UserVaultAppDetail.ClientId, user.Identity.Name, userVaultModel.UserVaultAppDetail.PayLoadData);
            }
        }
        catch (Exception ex)
        {
            showSpinner = false;
        }
        finally
        {
            showSpinner = false;
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (userVaultModel.SystemNameId != null || userVaultModel.SystemNameId <= 0)
            {
                userVaultModel.UserVaultAppDetail.ClientId = _config.GetSection("Xero:ClientId").Value;
                userVaultModel.UserVaultAppDetail.ClientSecret = _config.GetSection("Xero:ClientSecret").Value;
            }

            using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));
            while (await periodicTimer.WaitForNextTickAsync() && verify == true)
            {
                try
                {
                    if (userVaultModel.SystemNameId != null || userVaultModel.SystemNameId <= 0)
                    {
                        if (userVaultModel.UserVaultAppDetail.UserVaultId != null || userVaultModel.UserVaultAppDetail.UserVaultId <= 0)
                        {
                            userVaultModel.UserVaultAppDetail = await _userVaultService.GetUserVaultAppDetailsV2(userVaultModel.UserVaultAppDetail.UserVaultId);
                            if (userVaultModel.UserVaultAppDetail.PayLoadData != null)
                            {
                                await initXero((int)userVaultModel.UserVaultAppDetail.UserVaultId, userVaultModel.UserVaultAppDetail.ClientId, user.Identity.Name, userVaultModel.UserVaultAppDetail.PayLoadData);
                                await InvokeAsync(StateHasChanged);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }
    }


    private void ChkBoxIsStoreInQTX(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (bool.Parse(value) == true)
        {
            userVaultModel.UserVaultAppDetail.IsKeepData = false;
        }
    }

    private void ChkBoxIsBackUpToCustomer(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (bool.Parse(value) == true)
        {
            userVaultModel.UserVaultAppDetail.IsStoreInQTX = true;
            userVaultModel.UserVaultAppDetail.IsKeepData = false;
        }

    }

    private void ChkBoxIsKeepData(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (bool.Parse(value) == true)
        {
            userVaultModel.UserVaultAppDetail.IsStoreInQTX = false;
            userVaultModel.UserVaultAppDetail.IsBackUpToCustomer = false;
        }
    }


    private void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        StateHasChanged();
    }

    private async Task Submit(EditContext mycontext)
    {
        showSpinner = true;
        bool isValid = mycontext.Validate();
        bool isAdd = (userVaultModel.Id == null) ? true : false;
        await processSubmit(isAdd, isValid);
        showSpinner = false;
        this.refreshParent = true;
        this.OnSubmitHandler();
        this.CloseDialog();
    }

    public async Task processSubmit(bool isAdd, bool isValid)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var customerTenant = await _userSecurityService.GetCustomerTenants(customerTenantID);

            

#line default
#line hidden
#nullable disable
#nullable restore
#line 1218 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
             if (userVaultModel.ConnectorTypeId == (byte)EnumConnectorType.Oauth && userVaultModel.System != EnumSystem.SalesForce)
            {
                userVaultModel.UserVaultAppDetail.ServerName = string.Empty;
                userVaultModel.UserVaultAppDetail.DatabaseName = string.Empty;
                userVaultModel.UserVaultAppDetail.UserName = string.Empty;
                userVaultModel.UserVaultAppDetail.UserPassword = string.Empty;
                userVaultModel.ConnectionString = string.Empty;
                string callbackUri = uriHelper.BaseUri + "api/AuthorizeApp/XeroCallback";
                userVaultModel.UserVaultAppDetail.CallBackUrl = callbackUri;
            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1229 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
             if (userVaultModel.ConnectorTypeId == (byte)EnumConnectorType.SQL && userVaultModel.System != EnumSystem.SalesForce)
            {
                userVaultModel.UserVaultAppDetail.ClientId = string.Empty;
                userVaultModel.UserVaultAppDetail.ClientSecret = string.Empty;
                userVaultModel.UserVaultAppDetail.CallBackUrl = string.Empty;
                userVaultModel.UserVaultAppDetail.DateTokenExpiredUtc = null;
                userVaultModel.UserVaultAppDetail.RefreshToken = string.Empty;
                userVaultModel.UserVaultAppDetail.AccessToken = string.Empty;
            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1237 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
             


            if (isValid)
            {
                userVaultModel.System = (EnumSystem)userVaultModel?.SystemNameId;
                if (userVaultModel.UserVaultAppDetail.IsKeepData)
                {
                    userVaultModel.ContentType = $"Customer: {customerTenant.Name},  System: {userVaultModel.System.GetDescription()},Id:{userVaultModel.SystemNameId},Keep-Data:true" + " SQL";
                }
                else if (userVaultModel.UserVaultAppDetail.IsBackUpToCustomer)
                {
                    userVaultModel.ContentType = $"Customer: {customerTenant.Name},  System: {userVaultModel.System.GetDescription()},Id:{userVaultModel.SystemNameId},Backup-Customer:true" + " SQL";
                    userVaultModel.ConnectionString = userVaultModel.UserVaultAppDetail.DatalakeConStringBackup;
                }
                else
                {
                    

#line default
#line hidden
#nullable disable
#nullable restore
#line 1254 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
                     if (userVaultModel.ConnectorTypeId == (byte)EnumConnectorType.Oauth)
                    {
                        userVaultModel.ContentType = $"Customer: {customerTenant.Name}, System: {userVaultModel.System.GetDescription()},Id:{userVaultModel.SystemNameId}" + " SQL";
                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1258 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
                     if (userVaultModel.ConnectorTypeId == (byte)EnumConnectorType.SQL)
                    {
                        userVaultModel.ContentType = $"Customer: {customerTenant.Name}, System: {userVaultModel.System.GetDescription()},Id:{userVaultModel.SystemNameId}" + " OAuth";
                        userVaultModel.ConnectionString = $"Data Source={userVaultModel.UserVaultAppDetail.ServerName}; Initial Catalog={userVaultModel.UserVaultAppDetail.DatabaseName}; User Id={userVaultModel.UserVaultAppDetail.UserName}; Password={userVaultModel.UserVaultAppDetail.UserPassword}";
                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1262 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
                     
                }

                userVaultModel.CustomerTenantID = customerTenantID;
                KeyVaultSecret keyVaultSecretValue;

                userVaultModel = await _userVaultService.UpsertUserVaultAsync(userVaultModel);

                userVaultModel.UserVaultAppDetail.UserVaultId = userVaultModel.Id;

                userVaultModel.UserVaultAppDetail = await _userVaultService.UpsertUserVaultAppDetailAsync(userVaultModel.UserVaultAppDetail);

                if (userVaultModel.ConnectionString != null)
                    keyVaultSecretValue = await _keyVaultManager.SetSecret(userVaultModel);

                if (userVaultModel.UserVaultAppDetail.IsKeepData)
                {
                    await _keyVaultManager.SetSecretValue(userVaultModel);
                }

                //dropdown
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 1283 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
                 if (userVaultModel.System == EnumSystem.SalesForce)
                {
                    //get the description of child
                    List<UserVaultSalesForceTable> salesForceList = new List<UserVaultSalesForceTable>();
                    foreach (var x in this.SalesForceTableList)
                    {
                        string columnsCommaSep = "";
                        if(x.IsSelected == true)
                        {
                            var selectedColumns = this.SalesForceColumnList.Where(y=>y.ParentName == x.QualifiedApiName && y.IsSelected == true).Select(z=>z.QualifiedApiName).ToList();
                            columnsCommaSep = string.Join(",", selectedColumns);

                            if (columnsCommaSep != "")
                            {
                                var salesForce = new UserVaultSalesForceTable { TableName = x.QualifiedApiName, Columns = columnsCommaSep, UserVaultAppDetailsId = userVaultModel.UserVaultAppDetail.Id };
                                salesForceList.Add(salesForce);
                            }
                        }
                    }
                    if(salesForceList.Count> 0)
                    {
                          await  _salesForceService.AddTableAndColumns(salesForceList); 
                    }
                    else
                    {
                        await _salesForceService.RemoveAllTableAndColumns(userVaultModel.UserVaultAppDetail.Id);
                    }
                  
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1311 "C:\Users\Rebo\source\repos\DAaaS\BlazorDataAnalytics\Dialogs\UserVaultDialog.razor"
                 

                //load files
                foreach (var file in loadedFiles)
                {
                    using (var ms = new MemoryStream())
                    {
                        var fileBytes = ms.ToArray();

                        var fileUploadModel = new FileUploadModel
                            {
                                FileName = file.Name,
                                FileMimeType = file.ContentType,
                                FileByte = fileBytes,
                                Container = "CSV",
                                SubDirectory = defaultDirectory
                    };

                        string imageBlobUrl = _blobStorageService.UploadFileToBlob(fileUploadModel).Result;

                    }

                }

                var message = isAdd ? "Added DataSource with UserVault Id: " + userVaultModel.Id : "Updated DataSource with UserVault Id: " + userVaultModel.Id;

                var log = new LogModel { Date = System.DateTime.Now, UserEmail = user.Identity.Name, Message = message, Module = "DataSource" };
                await _logService.Log(log);
            }

        }
        catch (Exception ex)
        {

        }
    }

    public async Task OnChangeUpload(UploadChangeEventArgs args) 
    { 
        var authState =  AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.Result.User;


        string conStringDb = _configuration.GetConnectionString("XeroConnection").Replace("databaseName", "master");
        string queryDb = @"SELECT name, database_id, create_date
                            FROM sys.databases";

        sqlDatabases = CreateCommand(queryDb, conStringDb, true);

        string Filename = "";
        string url = "";
        foreach (var file in args.Files) 
        { 
            CloudStorageAccount cloudStorageAccount = CloudStorageAccount.Parse("DefaultEndpointsProtocol=https;AccountName=storageaccountlanz9402;AccountKey=w/99ADayKZqqXlj2oP7g/RJUGMadxsKh/KUW8WQr1SQypKKqRNn5pXANZMQuuzj4BqEOhX98Ga8idLP45mnNhQ==;EndpointSuffix=core.windows.net");
            var blobClient = cloudStorageAccount.CreateCloudBlobClient(); 
            var container = blobClient.GetContainerReference("csv");
            await container.CreateIfNotExistsAsync(); 
            await container.SetPermissionsAsync(new BlobContainerPermissions() 
            { 
                PublicAccess = BlobContainerPublicAccessType.Blob 
            });
            Filename = file.FileInfo.Name;
            var blob = container.GetBlockBlobReference(Filename); 
            blob.Properties.ContentType = file.FileInfo.MimeContentType;
            byte[] bytes = file.Stream.ToArray();
            await blob.UploadFromByteArrayAsync(bytes, 0, bytes.Length);
            url = blob.Uri.AbsoluteUri;
        }

        CustomerName = CustomerName.ToLower().Replace("daaas", "").Replace("-", "");
        var dbName = sqlDatabases.Where(x => x.ToString().ToLower().Contains(CustomerName.ToLower().Trim())).FirstOrDefault();

        if (string.IsNullOrEmpty(dbName)) 
        {
            toastService.ShowError("No Database Found!", "Error!");
        }

        string conString =  _configuration.GetConnectionString("XeroConnection").Replace("databaseName",dbName);
        string dropQuery = "  DROP VIEW IF EXISTS [dbo].[CSV-" +  Filename + "]";
        string query = @"
                        CREATE   VIEW  [dbo].[CSV-" +  Filename + @"] AS
                        SELECT
                            *
                        FROM
                            OPENROWSET(
                                BULK   '" + url + @"',
                                FORMAT =  'CSV',
                                parser_version = '2.0',      
                                FIELDTERMINATOR =',', 
                                ROWTERMINATOR = '\n',
                                HEADER_ROW = " + HeaderRow + @"
                            ) AS [r];
                        ";

        createView(conString,query, dropQuery, true, dbName);
    }

    private void createView(string connectionString , string queryString, string dropQuery, bool isSQLDatabase, string databaseName = null)
    {
        try
        {
            using (SqlConnection connection = new SqlConnection(
            connectionString))
            {
                SqlCommand command = new SqlCommand(dropQuery, connection);
                command.Connection.Open();
                command.ExecuteNonQuery();
                command.Connection.Close();

                SqlCommand commandCreate = new SqlCommand(queryString, connection);
                commandCreate.Connection.Open();
                commandCreate.ExecuteNonQuery();
                commandCreate.Connection.Close();
            }
            toastService.ShowSuccess("Succesfuly Created View", "Success");
        }
        catch(Exception ex)
        {
            toastService.ShowError(ex.Message, "Error!");
        }
    }

    private List<string> CreateCommand(string queryString,string connectionString, bool isSQLDatabase, string databaseName = null)
    {
        List<string> data = new List<string>();
        using (SqlConnection connection = new SqlConnection(
        connectionString))
        {
            SqlCommand command = new SqlCommand(queryString, connection);
            command.Connection.Open();
            command.ExecuteNonQuery();
            SqlDataReader reader = command.ExecuteReader();

            //    // Call Read before accessing data.
            while (reader.Read())
            {
                var record = reader[0];
                data.Add(record.ToString());


            }
            command.Connection.Close();
            reader.Close();
        }
        return data;
    }

    private string GenerateFileName(string fileName, string subDirectory)
    {
        string strFileName = string.Empty;
        string[] strName = fileName.Split('.');
        strFileName = subDirectory + "/" + fileName;
        return strFileName;
    }

    public async Task VerifyApplicationAuthentication()
    {
        showSpinner = true;
        if (userVaultModel.Id == null || userVaultModel.Id <= 0)
        {
            bool isAdd = (userVaultModel.Id == null) ? true : false;
            await processSubmit(isAdd, true);
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if ((EnumSystem)userVaultModel.SystemNameId == EnumSystem.Xero)
        {
            string callbackUri = uriHelper.BaseUri + "api/AuthorizeApp/XeroCallback";


            XeroConfiguration xconfig = new XeroConfiguration
                {
                    ClientId = _config.GetSection("Xero:ClientId").Value,
                    ClientSecret = _config.GetSection("Xero:ClientSecret").Value,
                    CallbackUri = new Uri(callbackUri),
                    Scope = "offline_access accounting.transactions openid profile email accounting.contacts accounting.settings accounting.budgets.read accounting.journals.read accounting.reports.read",
                    State = userVaultModel.Id.ToString()
                };

            var client = new XeroClient(xconfig);

            TokenUtilities.StoreCodeVerifier(TokenUtilities.GenerateCodeVerifier());
            string url = client.BuildLoginUriPkce(TokenUtilities.GetCodeVerifier());
            verify = true;
            showSpinner = false;
            await jsRuntime.InvokeAsync<object>("open", url, "_blank");
        }
        showSpinner = false;
    }

    public async Task DisConnectXero()
    {
        if (selectedTenant == null)
            return;

        var Tenant = ListOfXeroxSelectedTenants.Where(t => t.TenantId.ToString().Equals(selectedTenant.ToString())).FirstOrDefault();
        string baseUrl = new Uri(NavigationManager.BaseUri).ToString();
        string callbackUri = baseUrl + "/api/AuthorizeApp/XeroCallback";
        var userVaultAppDetails = await _userVaultService.GetUserVaultAppDetails(id);

        XeroConfiguration xconfig = new XeroConfiguration
            {
                ClientId = userVaultAppDetails.ClientId,
                ClientSecret = userVaultAppDetails.ClientSecret,
                CallbackUri = new Uri(callbackUri),
                Scope = "offline_access accounting.transactions openid profile email accounting.contacts accounting.settings files",
                State = id.ToString()
            };

        var client = new XeroClient(xconfig);

        var xeroToken = System.Text.Json.JsonSerializer.Deserialize<XeroOAuth2Token>(userVaultAppDetails.PayLoadData);
        await client.DeleteConnectionAsync(xeroToken, Tenant);
        ListOfXeroxSelectedTenants.Remove(Tenant);
        selectedTenant = default;

    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(5))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
            }
        }
    }


    public void SelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        var id = int.Parse(args.Value.ToString());
        SystemData.ForEach(x => x.Checked = null);
        var tempSystem = this.SystemData.Where(x => x.Id == id).First();
        tempSystem.Checked = "Checked";
        userVaultModel.ConnectorTypeId = tempSystem.ConnectorTypeId;
        userVaultModel.System = (EnumSystem)tempSystem.Id;
        userVaultModel.SystemNameId = byte.Parse(args.Value.ToString());

    }

    public void ShowPassword()
    {
        if (PassTxtType == InputType.Password)
        {
            PassTxtType = InputType.Text;
        }
        else
        {
            PassTxtType = InputType.Password;
        }
    }

    public void ShowToken()
    {
        if (TokenTxtType == InputType.Password)
        {
            TokenTxtType = InputType.Text;
        }
        else
        {
            TokenTxtType = InputType.Password;
        }
    }

    public void ShowClientId()
    {
        if (ClientIdType == InputType.Password)
        {
            ClientIdType = InputType.Text;
        }
        else
        {
            ClientIdType = InputType.Password;
        }
    }

    public void ShowClientSecret()
    {
        if (ClientSecretType == InputType.Password)
        {
            ClientSecretType = InputType.Text;
        }
        else
        {
            ClientSecretType = InputType.Password;
        }
    }

    private async Task OnFilter(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var query = new Query().Where(new WhereFilter() { Field = "Name", Operator = "contains", value = args.Text, IgnoreCase = true });

        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();

        await ddlObj.FilterAsync(ReuccurenceDescFiltered, query);
    }

    public async Task<SalesForceToken> GetToken()
    {
        string url = "https://login.salesforce.com/services/oauth2/token";
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("https://login.salesforce.com/services/oauth2/token");          

        var queryString = new Dictionary<string, string>()
        {
            { "grant_type", "password"  }, { "client_id", userVaultModel.UserVaultAppDetail.ClientId   },  { "client_secret",userVaultModel.UserVaultAppDetail.ClientSecret  }, { "username", userVaultModel.UserVaultAppDetail.UserName} ,  { "password", userVaultModel.UserVaultAppDetail.UserPassword + userVaultModel.UserVaultAppDetail.SecurityToken }
        };
        var requestUri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("?", queryString);

        var request = new HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);

        request.Content = new   StringContent(string.Empty,  Encoding.UTF8,   "application/x-www-form-urlencoded");
        var response = await httpClient.SendAsync(request);


        var jsonString = await response.Content.ReadAsStringAsync();
        var data =  JsonConvert.DeserializeObject<SalesForceToken>(jsonString);
        return data;
    }

    public async Task RetrieveTables()
    {
        SalesForceTableList = await GetTables();
    }


    public async Task<List<Record>> GetTables()
    {
        try
        {
            showSpinner = true;
            var token = await GetToken();

            var baseAddress = token.instance_url + "/services/data/v56.0/query";
            HttpClient httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri(baseAddress);         
            httpClient.DefaultRequestHeaders.Authorization =  new AuthenticationHeaderValue("Bearer", token.access_token);


            var queryString = new Dictionary<string, string>()
            {
                { "q", "SELECT  QualifiedApiName FROM EntityDefinition order by QualifiedApiName" }
            };
            var requestUri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("?", queryString);

            var request = new HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);

            request.Content = new   StringContent(string.Empty,  Encoding.UTF8,   "application/x-www-form-urlencoded");

            var response = await httpClient.SendAsync(request);
            var jsonString = await response.Content.ReadAsStringAsync();
            var data = JsonConvert.DeserializeObject<SalesForceTable>(jsonString);

            if(userVaultModel.UserVaultAppDetail.Id!=null)
            {
                this.selectedTables = await _salesForceService.getUserVaultAppDetailTablesAndColumns(userVaultModel.UserVaultAppDetail.Id);
                foreach(var y in data.records)
                {
                    if(selectedTables.Select(x=>x.TableName).Contains(y.QualifiedApiName))
                    {
                        y.IsSelected = true;
                    }
                }
            }
            showSpinner = false;
            return data.records; 
        }
        catch(Exception ex)
        {
            toastService.ShowError("Cannot Retrieve Sales Force Tables!", "Error");
            showSpinner = false;
            return null;
        }

    }

    public async Task<List<Record>> GetColumns(string tableName)
    {
        var token = await GetToken();
        var baseAddress = token.instance_url + "/services/data/v56.0/query";
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(baseAddress);         
        httpClient.DefaultRequestHeaders.Authorization =  new AuthenticationHeaderValue("Bearer", token.access_token);

        var query = "SELECT  QualifiedApiName FROM FieldDefinition WHERE EntityDefinition.QualifiedApiName = '" + tableName + "'";
        var queryString = new Dictionary<string, string>()
        {
            { "q",query}
        };
        var requestUri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("?", queryString);

        var request = new HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);

        request.Content = new   StringContent(string.Empty,  Encoding.UTF8,   "application/x-www-form-urlencoded");

        var response = await httpClient.SendAsync(request);
        var jsonString = await response.Content.ReadAsStringAsync();
        var data = JsonConvert.DeserializeObject<SalesForceColumn>(jsonString);

        data.records.ForEach(x => x.ParentName = tableName);
        this.selectedTables = await _salesForceService.getUserVaultAppDetailTablesAndColumns(userVaultModel.UserVaultAppDetail.Id);
        var selectedColumns = selectedTables.Where(x=>x.TableName == tableName).Select(x=>x.Columns).FirstOrDefault();
        if (selectedColumns != null)
        {
            var columnsToRow = selectedColumns.Split(",");

            foreach (var y in data.records)
            {
                if (columnsToRow.Contains(y.QualifiedApiName))
                {
                    y.IsSelected = true;
                }
            }
        }
        return data.records;
    }

    private async Task EditTable(Record rec)
    {
        //rec.IsSelected = true;
        SalesForceColumnList = await GetColumns(rec.QualifiedApiName);
        IsVisibleEditTable = true;
        this.StateHasChanged();
    }

    private async Task PreviewData(Record rec)
    {
        await GetData(rec);
        this.StateHasChanged();
    }

    private void onChangeColumn(Record args)
    {
        if (args.IsSelected)
        {
            SalesForceTableList.Where(x => x.QualifiedApiName == args.ParentName).FirstOrDefault().IsSelected = true;
        }
        else 
        {
            var temp = SalesForceColumnList.Where(x => x.ParentName == args.ParentName && x.IsSelected == true).FirstOrDefault();
            if(temp==null)
            {
                SalesForceTableList.Where(x => x.QualifiedApiName == args.ParentName).FirstOrDefault().IsSelected = false;
            }
        }
    }

    public async Task SaveColumnDialog()
    {
        List<UserVaultSalesForceTable> salesForceList = new List<UserVaultSalesForceTable>();

        var tableSelected = this.SalesForceTableList.Where(x => x.IsSelected);
        foreach (var x in tableSelected)
        {
            string columnsCommaSep = "";
            if(x.IsSelected == true)
            {
                var selectedColumns = this.SalesForceColumnList.Where(y=>y.ParentName == x.QualifiedApiName && y.IsSelected == true).Select(z=>z.QualifiedApiName).ToList();
                columnsCommaSep = string.Join(",", selectedColumns);

                if (columnsCommaSep != "")
                {
                    var salesForce = new UserVaultSalesForceTable { TableName = x.QualifiedApiName, Columns = columnsCommaSep, UserVaultAppDetailsId = userVaultModel.UserVaultAppDetail.Id };
                    salesForceList.Add(salesForce);
                }
            }

        }

        bool isAdd = (userVaultModel.Id == null) ? true : false;

        if (isAdd)
        {
            await processSubmit(isAdd, true);
            this.IsVisibleEditTable = false;
            toastService.ShowSuccess("Succesfuly Save tables and columns", "Success");
        }
        else 
        {
            showSpinner = true;
            if(salesForceList.Count> 0)
            {
                await  _salesForceService.AddTableAndColumns(salesForceList); 
            }
            else
            {
                await _salesForceService.RemoveAllTableAndColumns(userVaultModel.UserVaultAppDetail.Id);
            }
            showSpinner = false;
            this.IsVisibleEditTable = false;
            toastService.ShowSuccess("Succesfuly Save tables and columns", "Success");
        }
    }

    public void CloseColumnDialog()
    {
        this.IsVisibleEditTable = false;
        this.StateHasChanged();
    }

    private List<ExpandoObject> GridDatax;

    public class ExpandCls
    {
        public int totalSize { get; set; }
        public bool done { get; set; }
        public List<ExpandoObject> records { get; set; }
    }

    private async Task GetData(Record rec)
    {
        try
        {
            var token = await GetToken();
            var baseAddress = token.instance_url + "/services/data/v56.0/query";
            HttpClient httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri(baseAddress);         
            httpClient.DefaultRequestHeaders.Authorization =  new AuthenticationHeaderValue("Bearer", token.access_token);

            var query = "SELECT  FIELDS(ALL)  FROM " + rec.QualifiedApiName + "  LIMIT 200";
            var queryString = new Dictionary<string, string>()
            {
                { "q",query}
            };
            var requestUri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("?", queryString);

            var request = new HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);

            request.Content = new   StringContent(string.Empty,  Encoding.UTF8,   "application/x-www-form-urlencoded");

            var response = await httpClient.SendAsync(request);
            var jsonString = await response.Content.ReadAsStringAsync();
            var datax = JsonConvert.DeserializeObject<ExpandCls>(jsonString);


            var data = datax.records;
            GridDatax =  data;
            IsVisiblePreview = true;
            StateHasChanged();
        }
        catch(Exception ex)
        {
            toastService.ShowError("Cannot Preview Data for this table", "System Message");
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISalesForceService _salesForceService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration _configuration { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBlobStorageService _blobStorageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogService _logService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration _config { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService _localStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService _sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IKeyVaultManager _keyVaultManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserVaultService _userVaultService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserSecurityService _userSecurityService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
