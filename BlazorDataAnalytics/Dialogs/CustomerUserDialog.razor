@page "/customer-user-dialog"

@using BlazorDataAnalytics.Models
@using BlazorDataAnalytics.Services
@using BlazorDataAnalytics.Enums
@using BlazorDataAnalytics.Services.UserSecurityService
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Popups
@inject IUserSecurityService _userSecurityService

<style> 
    .text-multiline textarea{ 
        height: 400px !important; 
    } 
</style> 

<SfDialog Target="#target" Width="600px" ShowCloseIcon="true" @bind-Visible="IsVisible" AllowPrerender="true" IsModal="true">
    <DialogTemplates>
        <Header>Customer User</Header>
        <Content>
            <!-- Pop it above the backdrop -->
            <div class="modal-content">
                <EditForm id="frmCustomerUserId" Model="@customerUserModel" OnSubmit="Submit">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="form-group d-flex" style="margin-bottom: 2%;">
                            <label class="col-2" for="name">Id</label>
                            <SfTextBox Placeholder="Id" Value="@customerUserModel.Id.ToString()" Readonly=true> </SfTextBox>
                        </div>
                        <div class="form-group d-flex" style="margin-bottom: 2%;">
                            <label class="col-2" for="name">Title</label>
                            <SfTextBox ID="Username" Placeholder="Username" @bind-Value="@customerUserModel.UserName"></SfTextBox>
                        </div>
                        <div class="form-group d-flex" style="margin-bottom: 2%;">
                            <label class="col-2" for="name">Tenant</label>
                            <SfDropDownList TValue="int?" TItem="CustomerTenantModel" Placeholder="Select a tenant" DataSource="@customerTenantData" @bind-Value="customerUserModel.CustomerTenantId">
                                <DropDownListEvents TItem="CustomerTenantModel" TValue="int?" ValueChange="@CustomerTenantValueChange"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                        <div class="form-group d-flex" style="margin-bottom: 2%;">
                            <label class="col-2" for="name">Group</label>
                            <SfMultiSelect Placeholder="Select a group" @bind-Value="@customerUserModel.SelectedCustomerUserGroupData" DataSource="@customerUserGroupData">
                                <MultiSelectFieldSettings Value="Id" Text="GroupName"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                        <div class="form-group d-flex" style="margin-bottom: 2%;">
                            <SfCheckBox Label="Admin" @bind-Checked="customerUserModel.IsAdmin"></SfCheckBox>
                        </div>
                    </div>
                </EditForm>
                <div class="modal-footer">
                    <SfButton CssClass="e-medium" HtmlAttributes="@(new() { { "form", "frmCustomerUserId" } })">Submit</SfButton>
                    <SfButton CssClass="e-medium e-danger" OnClick="CloseDialog">Close</SfButton>
                </div>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>




@code {

    SfDialog DialogObj;

    [CascadingParameter]
    private BlazoredModalInstance _modalInstance { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter]
    public int customerUserId { get; set; } = 0;

    [Parameter]
    public string userName { get; set; }

    [Parameter]
    public int customerTenantId { get; set; } = 0;

    [Parameter]
    public int customerUserGroupId { get; set; } = 0;

    [Parameter]
    public bool isAdmin { get; set; } = false;

    [Parameter]
    public bool isActive { get; set; } = false;

    [Parameter]
    public int?[] selectedCustomerUserGroupData { get; set; } = new int?[] { };

    [Parameter]
    public bool refreshParent { get; set; } = false;

    [Parameter]
    public EventCallback<bool> RefreshPageEventCallBack { get; set; }

    public bool IsVisible { get; set; } = false;


    CustomerUserModel customerUserModel { get; set; } = new CustomerUserModel();

    List<CustomerTenantModel> customerTenantData = new List<CustomerTenantModel>();
    List<CustomerUserGroupModel> customerUserGroupData = new List<CustomerUserGroupModel>();


    public async Task OpenDialog(CustomerUserModel customerUserModel)
    {
        this.IsVisible = true;

        if(customerUserModel != null)
        {
            customerUserId = customerUserModel.Id;
            customerTenantId = customerUserModel.CustomerTenantId ?? 0;
            isAdmin = customerUserModel.IsAdmin ?? false;
            userName = customerUserModel.UserName ?? string.Empty;
            selectedCustomerUserGroupData = customerUserModel.SelectedCustomerUserGroupData ?? new int?[] { };
        }
        this.OnInitializedAsync();
        this.StateHasChanged();
    }

    public void CloseDialog()
    {
        this.IsVisible = false;
        this.StateHasChanged();
    }


    private void OnSubmitHandler()
    {
        RefreshPageEventCallBack.InvokeAsync(this.refreshParent);
    }

    //private void Cancel()
    //{
    //    _modalInstance.CancelAsync();
    //}

    //private async Task CloseDialog()
    //{
    //    await _modalInstance.CloseAsync();
    //}

    protected override async Task OnInitializedAsync()
    {
        this.refreshParent = false;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        customerTenantData = await _userSecurityService.GetAllCustomerTenantsByUserName(user.Identity.Name);

        if(customerUserId > 0)
        {
            customerUserGroupData = await _userSecurityService.GetCustomerGroupTenants(customerTenantId);

            customerUserModel = new CustomerUserModel
            {
                Id = customerUserId,
                UserName = userName,
                SelectedCustomerUserGroupData = selectedCustomerUserGroupData,
                CustomerTenantId = customerTenantId,
                IsActive = isActive,
                IsAdmin = isAdmin
            };

        }

        StateHasChanged();
    }

    private void CustomerTenantValueChange(ChangeEventArgs<int?, CustomerTenantModel> args)
    {
        customerUserGroupData = _userSecurityService.GetCustomerGroupTenants(args.ItemData.Id).Result;
    }


    private async Task Submit(EditContext context)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        bool isValid = context.Validate();

        if (isValid && customerUserModel.SelectedCustomerUserGroupData.Any())
        {
            customerUserModel = await _userSecurityService.UpsertCustomerUsers(customerUserModel);
            if(customerUserModel.SelectedCustomerUserGroupData != null)
            {
                if(customerUserModel.SelectedCustomerUserGroupData.Any())
                {
                    await _userSecurityService.UpsertCustomerAssignGroup(customerUserModel.Id, customerUserModel.SelectedCustomerUserGroupData.ToList());
                    this.refreshParent = true;
                    this.OnSubmitHandler();
                }
            }
            else
            {

            }
            CloseDialog();
        }
        else
        {
            // Form has invalid inputs.
        }
        
    }

}
