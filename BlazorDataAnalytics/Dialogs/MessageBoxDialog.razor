@using BlazorDataAnalytics.Models
@using BlazorDataAnalytics.Services
@using BlazorDataAnalytics.Enums
@using BlazorDataAnalytics.Services.ReportBugService
@using BlazorDataAnalytics.Services.UserThemeSettingService
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using System.Threading
@using Syncfusion.Blazor.DropDowns; 
@using Syncfusion.Blazor.Buttons; 
@using Microsoft.AspNetCore.WebUtilities 
@using Syncfusion.Blazor.Notifications
@using Blazored.Toast
@using Blazored.Toast.Services
@inject IToastService toastService

@inject IUserThemeSettingService _userThemeSettingService
@inject NavigationManager uriHelper
@inherits LayoutComponentBase 
@inject NavigationManager UrlHelper; 



@code {
    [CascadingParameter]
    private BlazoredModalInstance _modalInstance { get; set; }

    [Parameter]
    public string alert { get; set; }

    [Parameter]
    public string message { get; set; }
    [Parameter]
    public string title { get; set; }

    public string CssClass = "alert-success";

    [Parameter]
    public EventCallback<bool> RefreshPageEventCallBack { get; set; }

    private bool showSpinner { get; set; } = false;

    private string customerTenantName { get; set; }

    public bool IsVisible { get; set; } = false;

    [Parameter]
    public bool refreshParent { get; set; } = false;

    public async Task OpenDialog(string alertType, string content)
    {
        this.IsVisible = true;
        this.refreshParent = false;
         switch (alertType)
        {

            case AlertStatus.Danger:
                {
                    CssClass = "ERROR";
                      toastService.ShowError(content,CssClass);
                    break;

                }
            case AlertStatus.Warning:
                {
                    CssClass = "WARNING";
                       toastService.ShowWarning(content,CssClass);
                    break;

                }
            case AlertStatus.Info:
                {
                    CssClass = "INFO";
                       toastService.ShowInfo(content,CssClass);
                    break;

                }
            default:
                CssClass = "SUCCESS";
                   toastService.ShowSuccess(content,CssClass);
                break;
        }
        this.StateHasChanged();
    }

    public void CloseDialog()
    {
        this.IsVisible = false;
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {

      

    }
    private async Task Close()
    {
        await _modalInstance.CloseAsync();
    }

}