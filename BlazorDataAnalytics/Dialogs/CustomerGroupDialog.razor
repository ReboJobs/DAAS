@using BlazorDataAnalytics.Models
@using BlazorDataAnalytics.Services
@using BlazorDataAnalytics.Enums
@using BlazorDataAnalytics.Services.UserSecurityService
@using Syncfusion.Blazor.Data
@inject IUserSecurityService _userSecurityService

<style> 
    .text-multiline textarea{ 
        height: 400px !important; 
    } 
</style> 
<SfDialog Target="#target" Width="600px" ShowCloseIcon="true" @bind-Visible="IsVisible" AllowPrerender="true" IsModal="true">
    <DialogTemplates>
      <Header>Customer Tenant Group</Header>
       <Content>
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Customer Tenant Group</h5>
                <button type="button" class="close" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
             <EditForm id="frmCustomerGroup" Model="@customerUserGroupModel" OnSubmit="Submit">
                 <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="form-group d-flex" style="margin-bottom: 2%;">
                        <label class="col-2" for="name">Id</label>
                         <SfTextBox Placeholder="Id" Value="@customerUserGroupModel.Id.ToString()" Readonly=true> </SfTextBox>
                    </div>
                   <div class="form-group d-flex" style="margin-bottom: 2%;">
                        <label class="col-2" for="name">Title</label>
                         <SfTextBox ID="Group Name" Placeholder="Group Name" @bind-Value="customerUserGroupModel.GroupName"></SfTextBox>
                     </div>
                   <div class="form-group d-flex" style="margin-bottom: 2%;"> 
                        <label class="col-2" for="name">Tenant</label>
                         <SfDropDownList TValue="int?" TItem="CustomerTenantModel" Placeholder="Select a tenant" DataSource="@customerTenantData" @bind-Value="customerUserGroupModel.CustomerTenantId">
                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                         </SfDropDownList>
                     </div>

                     <div class="form-group d-flex" style="margin-bottom: 2%;">
                        <label class="col-2" for="name">Tenant Group SID</label>
                         <SfTextBox ID="Tenant Group SID" Placeholder="Tenant Group SID" @bind-Value="customerUserGroupModel.CustomerTenantSID"></SfTextBox>
                     </div>

                     <div class="form-group d-flex" style="margin-bottom: 2%;">
                        <label class="col-2" for="active">Active</label>
                         <SfCheckBox  @bind-Checked="customerUserGroupModel.IsActive"></SfCheckBox>
                     </div>
                     <div class="form-group d-flex" style="margin-bottom: 2%;">
                        <label class="col-2" for="active">View By Everyone</label>
                         <SfCheckBox  @bind-Checked="customerUserGroupModel.ViewAllReport"></SfCheckBox>
                     </div>
                </div>
             </EditForm>
            <div class="modal-footer">
                    <SfButton CssClass="e-medium" HtmlAttributes="@(new() { { "form", "frmCustomerGroup" } })">Submit</SfButton>
                    <SfButton CssClass="e-medium e-danger" OnClick="CloseDialog">Close</SfButton>
            </div>
        </div>
         </Content>
    </DialogTemplates>
</SfDialog>

@code {

    [CascadingParameter]
    private BlazoredModalInstance _modalInstance { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter]
    public int customerUserGroupId { get; set; } = 0;

    [Parameter]
    public string groupname { get; set; }

    [Parameter]
    public int customerTenantId { get; set; } = 0;

    [Parameter]
    public bool isActive { get; set; } = true;

    [Parameter]
    public bool viewAllReport { get; set; } = true;

    [Parameter]
    public string customerTenantSID { get; set; }
    [Parameter]
    public bool refreshParent { get; set; } = false;
   [Parameter]
    public EventCallback<bool> RefreshPageEventCallBack { get; set; }

    CustomerUserGroupModel customerUserGroupModel { get; set; } = new CustomerUserGroupModel();

    List<CustomerTenantModel> customerTenantData = new List<CustomerTenantModel>();
    public bool IsVisible { get; set; } = false;
    private void Cancel()
    {
        CloseDialog();
        StateHasChanged();
    }

    private async Task Close()
    {
         CloseDialog();
        StateHasChanged();
    }

    public async Task OpenDialog(int id,  int _customerTenantId, string groupName, bool _isActive, bool _viewAllReport, string _customerTenantSID)
    {
        this.IsVisible = true;
        this.refreshParent = false;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        customerTenantData = await _userSecurityService.GetAllCustomerTenantsByUserName(user.Identity.Name);

        if(id > 0)
        {
            customerUserGroupModel = new CustomerUserGroupModel
            {
                Id = id,
                GroupName = groupName,
                CustomerTenantId = _customerTenantId,
                IsActive = _isActive,
                ViewAllReport = _viewAllReport,
                CustomerTenantSID = _customerTenantSID
            };
        } 
        else
        {
            customerUserGroupModel.IsActive = true;
        }

        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        this.refreshParent = false;
    }

    private async Task Submit(EditContext context)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        bool isValid = context.Validate();

        if (isValid)
        {
            customerUserGroupModel = await _userSecurityService.UpsertCustomerUserGroup(customerUserGroupModel);
            this.refreshParent = true;
            this.OnSubmitHandler();
            CloseDialog();
        }
        else
        {
            // Form has invalid inputs.
        }
        
    }
    public void CloseDialog()
    {
        this.IsVisible = false;
        this.StateHasChanged();
    }
    private void OnSubmitHandler()
    {
        RefreshPageEventCallBack.InvokeAsync(this.refreshParent);
    }
}
